package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/swag"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// NewGetRolesParams creates a new GetRolesParams object
// with the default values initialized.
func NewGetRolesParams() *GetRolesParams {
	var ()
	return &GetRolesParams{}
}

/*GetRolesParams contains all the parameters to send to the API endpoint
for the get roles operation typically these are written to a http.Request
*/
type GetRolesParams struct {

	/*HasAllUsers*/
	HasAllUsers *bool
	/*IncludeSubOrgs*/
	IncludeSubOrgs *bool
	/*Limit*/
	Limit *int32
	/*MaxRecords*/
	MaxRecords *int32
	/*Offset*/
	Offset *int32
	/*Q*/
	Q *string
	/*Search*/
	Search *string
	/*SubOrgID*/
	SubOrgID *string
	/*User*/
	User *string
}

// WithHasAllUsers adds the hasAllUsers to the get roles params
func (o *GetRolesParams) WithHasAllUsers(hasAllUsers *bool) *GetRolesParams {
	o.HasAllUsers = hasAllUsers
	return o
}

// WithIncludeSubOrgs adds the includeSubOrgs to the get roles params
func (o *GetRolesParams) WithIncludeSubOrgs(includeSubOrgs *bool) *GetRolesParams {
	o.IncludeSubOrgs = includeSubOrgs
	return o
}

// WithLimit adds the limit to the get roles params
func (o *GetRolesParams) WithLimit(limit *int32) *GetRolesParams {
	o.Limit = limit
	return o
}

// WithMaxRecords adds the maxRecords to the get roles params
func (o *GetRolesParams) WithMaxRecords(maxRecords *int32) *GetRolesParams {
	o.MaxRecords = maxRecords
	return o
}

// WithOffset adds the offset to the get roles params
func (o *GetRolesParams) WithOffset(offset *int32) *GetRolesParams {
	o.Offset = offset
	return o
}

// WithQ adds the q to the get roles params
func (o *GetRolesParams) WithQ(q *string) *GetRolesParams {
	o.Q = q
	return o
}

// WithSearch adds the search to the get roles params
func (o *GetRolesParams) WithSearch(search *string) *GetRolesParams {
	o.Search = search
	return o
}

// WithSubOrgID adds the subOrgId to the get roles params
func (o *GetRolesParams) WithSubOrgID(subOrgId *string) *GetRolesParams {
	o.SubOrgID = subOrgId
	return o
}

// WithUser adds the user to the get roles params
func (o *GetRolesParams) WithUser(user *string) *GetRolesParams {
	o.User = user
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetRolesParams) WriteToRequest(r client.Request, reg strfmt.Registry) error {

	var res []error

	if o.HasAllUsers != nil {

		// query param hasAllUsers
		var qrHasAllUsers bool
		if o.HasAllUsers != nil {
			qrHasAllUsers = *o.HasAllUsers
		}
		qHasAllUsers := swag.FormatBool(qrHasAllUsers)
		if qHasAllUsers != "" {
			if err := r.SetQueryParam("hasAllUsers", qHasAllUsers); err != nil {
				return err
			}
		}

	}

	if o.IncludeSubOrgs != nil {

		// query param includeSubOrgs
		var qrIncludeSubOrgs bool
		if o.IncludeSubOrgs != nil {
			qrIncludeSubOrgs = *o.IncludeSubOrgs
		}
		qIncludeSubOrgs := swag.FormatBool(qrIncludeSubOrgs)
		if qIncludeSubOrgs != "" {
			if err := r.SetQueryParam("includeSubOrgs", qIncludeSubOrgs); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.MaxRecords != nil {

		// query param maxRecords
		var qrMaxRecords int32
		if o.MaxRecords != nil {
			qrMaxRecords = *o.MaxRecords
		}
		qMaxRecords := swag.FormatInt32(qrMaxRecords)
		if qMaxRecords != "" {
			if err := r.SetQueryParam("maxRecords", qMaxRecords); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if o.Search != nil {

		// query param search
		var qrSearch string
		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {
			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}

	}

	if o.SubOrgID != nil {

		// query param subOrgId
		var qrSubOrgID string
		if o.SubOrgID != nil {
			qrSubOrgID = *o.SubOrgID
		}
		qSubOrgID := qrSubOrgID
		if qSubOrgID != "" {
			if err := r.SetQueryParam("subOrgId", qSubOrgID); err != nil {
				return err
			}
		}

	}

	if o.User != nil {

		// query param user
		var qrUser string
		if o.User != nil {
			qrUser = *o.User
		}
		qUser := qrUser
		if qUser != "" {
			if err := r.SetQueryParam("user", qUser); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
