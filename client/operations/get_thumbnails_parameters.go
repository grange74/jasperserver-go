package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetThumbnailsParams creates a new GetThumbnailsParams object
// with the default values initialized.
func NewGetThumbnailsParams() *GetThumbnailsParams {
	var ()
	return &GetThumbnailsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetThumbnailsParamsWithTimeout creates a new GetThumbnailsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetThumbnailsParamsWithTimeout(timeout time.Duration) *GetThumbnailsParams {
	var ()
	return &GetThumbnailsParams{

		timeout: timeout,
	}
}

/*GetThumbnailsParams contains all the parameters to send to the API endpoint
for the get thumbnails operation typically these are written to a http.Request
*/
type GetThumbnailsParams struct {

	/*Accept*/
	Accept *string
	/*DefaultAllowed*/
	DefaultAllowed *bool
	/*URI*/
	URI *string

	timeout time.Duration
}

// WithAccept adds the accept to the get thumbnails params
func (o *GetThumbnailsParams) WithAccept(Accept *string) *GetThumbnailsParams {
	o.Accept = Accept
	return o
}

// WithDefaultAllowed adds the defaultAllowed to the get thumbnails params
func (o *GetThumbnailsParams) WithDefaultAllowed(DefaultAllowed *bool) *GetThumbnailsParams {
	o.DefaultAllowed = DefaultAllowed
	return o
}

// WithURI adds the uri to the get thumbnails params
func (o *GetThumbnailsParams) WithURI(URI *string) *GetThumbnailsParams {
	o.URI = URI
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetThumbnailsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Accept != nil {

		// query param Accept
		var qrAccept string
		if o.Accept != nil {
			qrAccept = *o.Accept
		}
		qAccept := qrAccept
		if qAccept != "" {
			if err := r.SetQueryParam("Accept", qAccept); err != nil {
				return err
			}
		}

	}

	if o.DefaultAllowed != nil {

		// query param defaultAllowed
		var qrDefaultAllowed bool
		if o.DefaultAllowed != nil {
			qrDefaultAllowed = *o.DefaultAllowed
		}
		qDefaultAllowed := swag.FormatBool(qrDefaultAllowed)
		if qDefaultAllowed != "" {
			if err := r.SetQueryParam("defaultAllowed", qDefaultAllowed); err != nil {
				return err
			}
		}

	}

	if o.URI != nil {

		// query param uri
		var qrURI string
		if o.URI != nil {
			qrURI = *o.URI
		}
		qURI := qrURI
		if qURI != "" {
			if err := r.SetQueryParam("uri", qURI); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
