package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetJobWithProcessedParametersParams creates a new GetJobWithProcessedParametersParams object
// with the default values initialized.
func NewGetJobWithProcessedParametersParams() *GetJobWithProcessedParametersParams {
	var ()
	return &GetJobWithProcessedParametersParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetJobWithProcessedParametersParamsWithTimeout creates a new GetJobWithProcessedParametersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetJobWithProcessedParametersParamsWithTimeout(timeout time.Duration) *GetJobWithProcessedParametersParams {
	var ()
	return &GetJobWithProcessedParametersParams{

		timeout: timeout,
	}
}

/*GetJobWithProcessedParametersParams contains all the parameters to send to the API endpoint
for the get job with processed parameters operation typically these are written to a http.Request
*/
type GetJobWithProcessedParametersParams struct {

	/*ID*/
	ID *int64

	timeout time.Duration
}

// WithID adds the id to the get job with processed parameters params
func (o *GetJobWithProcessedParametersParams) WithID(ID *int64) *GetJobWithProcessedParametersParams {
	o.ID = ID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetJobWithProcessedParametersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.ID != nil {

		// query param id
		var qrID int64
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatInt64(qrID)
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
