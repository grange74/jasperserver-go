package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteClearCacheParams creates a new DeleteClearCacheParams object
// with the default values initialized.
func NewDeleteClearCacheParams() *DeleteClearCacheParams {
	var ()
	return &DeleteClearCacheParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteClearCacheParamsWithTimeout creates a new DeleteClearCacheParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteClearCacheParamsWithTimeout(timeout time.Duration) *DeleteClearCacheParams {
	var ()
	return &DeleteClearCacheParams{

		timeout: timeout,
	}
}

/*DeleteClearCacheParams contains all the parameters to send to the API endpoint
for the delete clear cache operation typically these are written to a http.Request
*/
type DeleteClearCacheParams struct {

	/*CacheID*/
	CacheID *string

	timeout time.Duration
}

// WithCacheID adds the cacheId to the delete clear cache params
func (o *DeleteClearCacheParams) WithCacheID(CacheID *string) *DeleteClearCacheParams {
	o.CacheID = CacheID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteClearCacheParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.CacheID != nil {

		// path param cacheId
		if err := r.SetPathParam("cacheId", *o.CacheID); err != nil {
			return err
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
