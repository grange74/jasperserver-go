package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUpdateReorderInputControlsParams creates a new UpdateReorderInputControlsParams object
// with the default values initialized.
func NewUpdateReorderInputControlsParams() *UpdateReorderInputControlsParams {
	var ()
	return &UpdateReorderInputControlsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateReorderInputControlsParamsWithTimeout creates a new UpdateReorderInputControlsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateReorderInputControlsParamsWithTimeout(timeout time.Duration) *UpdateReorderInputControlsParams {
	var ()
	return &UpdateReorderInputControlsParams{

		timeout: timeout,
	}
}

/*UpdateReorderInputControlsParams contains all the parameters to send to the API endpoint
for the update reorder input controls operation typically these are written to a http.Request
*/
type UpdateReorderInputControlsParams struct {

	/*ReportUnitURI*/
	ReportUnitURI *string

	timeout time.Duration
}

// WithReportUnitURI adds the reportUnitUri to the update reorder input controls params
func (o *UpdateReorderInputControlsParams) WithReportUnitURI(ReportUnitURI *string) *UpdateReorderInputControlsParams {
	o.ReportUnitURI = ReportUnitURI
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateReorderInputControlsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.ReportUnitURI != nil {

		// query param reportUnitURI
		var qrReportUnitURI string
		if o.ReportUnitURI != nil {
			qrReportUnitURI = *o.ReportUnitURI
		}
		qReportUnitURI := qrReportUnitURI
		if qReportUnitURI != "" {
			if err := r.SetQueryParam("reportUnitURI", qReportUnitURI); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
