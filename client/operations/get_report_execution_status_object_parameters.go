package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetReportExecutionStatusObjectParams creates a new GetReportExecutionStatusObjectParams object
// with the default values initialized.
func NewGetReportExecutionStatusObjectParams() *GetReportExecutionStatusObjectParams {
	var ()
	return &GetReportExecutionStatusObjectParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetReportExecutionStatusObjectParamsWithTimeout creates a new GetReportExecutionStatusObjectParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetReportExecutionStatusObjectParamsWithTimeout(timeout time.Duration) *GetReportExecutionStatusObjectParams {
	var ()
	return &GetReportExecutionStatusObjectParams{

		timeout: timeout,
	}
}

/*GetReportExecutionStatusObjectParams contains all the parameters to send to the API endpoint
for the get report execution status object operation typically these are written to a http.Request
*/
type GetReportExecutionStatusObjectParams struct {

	/*ExecutionID*/
	ExecutionID *string

	timeout time.Duration
}

// WithExecutionID adds the executionId to the get report execution status object params
func (o *GetReportExecutionStatusObjectParams) WithExecutionID(ExecutionID *string) *GetReportExecutionStatusObjectParams {
	o.ExecutionID = ExecutionID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetReportExecutionStatusObjectParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.ExecutionID != nil {

		// path param executionId
		if err := r.SetPathParam("executionId", *o.ExecutionID); err != nil {
			return err
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
