package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUpdateDefaultPutHandlerForRootParams creates a new UpdateDefaultPutHandlerForRootParams object
// with the default values initialized.
func NewUpdateDefaultPutHandlerForRootParams() *UpdateDefaultPutHandlerForRootParams {
	var (
		createFoldersDefault bool = bool(true)
		expandedDefault      bool = bool(false)
		overwriteDefault     bool = bool(false)
	)
	return &UpdateDefaultPutHandlerForRootParams{
		CreateFolders: &createFoldersDefault,
		Expanded:      &expandedDefault,
		Overwrite:     &overwriteDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateDefaultPutHandlerForRootParamsWithTimeout creates a new UpdateDefaultPutHandlerForRootParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateDefaultPutHandlerForRootParamsWithTimeout(timeout time.Duration) *UpdateDefaultPutHandlerForRootParams {
	var (
		createFoldersDefault bool = bool(true)
		expandedDefault      bool = bool(false)
		overwriteDefault     bool = bool(false)
	)
	return &UpdateDefaultPutHandlerForRootParams{
		CreateFolders: &createFoldersDefault,
		Expanded:      &expandedDefault,
		Overwrite:     &overwriteDefault,

		timeout: timeout,
	}
}

/*UpdateDefaultPutHandlerForRootParams contains all the parameters to send to the API endpoint
for the update default put handler for root operation typically these are written to a http.Request
*/
type UpdateDefaultPutHandlerForRootParams struct {

	/*Accept*/
	Accept *string
	/*ContentDescription*/
	ContentDescription *string
	/*ContentDisposition*/
	ContentDisposition *string
	/*ContentLocation*/
	ContentLocation *string
	/*ContentType*/
	ContentType *string
	/*CreateFolders*/
	CreateFolders *bool
	/*Expanded*/
	Expanded *bool
	/*Overwrite*/
	Overwrite *bool

	timeout time.Duration
}

// WithAccept adds the accept to the update default put handler for root params
func (o *UpdateDefaultPutHandlerForRootParams) WithAccept(Accept *string) *UpdateDefaultPutHandlerForRootParams {
	o.Accept = Accept
	return o
}

// WithContentDescription adds the contentDescription to the update default put handler for root params
func (o *UpdateDefaultPutHandlerForRootParams) WithContentDescription(ContentDescription *string) *UpdateDefaultPutHandlerForRootParams {
	o.ContentDescription = ContentDescription
	return o
}

// WithContentDisposition adds the contentDisposition to the update default put handler for root params
func (o *UpdateDefaultPutHandlerForRootParams) WithContentDisposition(ContentDisposition *string) *UpdateDefaultPutHandlerForRootParams {
	o.ContentDisposition = ContentDisposition
	return o
}

// WithContentLocation adds the contentLocation to the update default put handler for root params
func (o *UpdateDefaultPutHandlerForRootParams) WithContentLocation(ContentLocation *string) *UpdateDefaultPutHandlerForRootParams {
	o.ContentLocation = ContentLocation
	return o
}

// WithContentType adds the contentType to the update default put handler for root params
func (o *UpdateDefaultPutHandlerForRootParams) WithContentType(ContentType *string) *UpdateDefaultPutHandlerForRootParams {
	o.ContentType = ContentType
	return o
}

// WithCreateFolders adds the createFolders to the update default put handler for root params
func (o *UpdateDefaultPutHandlerForRootParams) WithCreateFolders(CreateFolders *bool) *UpdateDefaultPutHandlerForRootParams {
	o.CreateFolders = CreateFolders
	return o
}

// WithExpanded adds the expanded to the update default put handler for root params
func (o *UpdateDefaultPutHandlerForRootParams) WithExpanded(Expanded *bool) *UpdateDefaultPutHandlerForRootParams {
	o.Expanded = Expanded
	return o
}

// WithOverwrite adds the overwrite to the update default put handler for root params
func (o *UpdateDefaultPutHandlerForRootParams) WithOverwrite(Overwrite *bool) *UpdateDefaultPutHandlerForRootParams {
	o.Overwrite = Overwrite
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateDefaultPutHandlerForRootParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Accept != nil {

		// query param Accept
		var qrAccept string
		if o.Accept != nil {
			qrAccept = *o.Accept
		}
		qAccept := qrAccept
		if qAccept != "" {
			if err := r.SetQueryParam("Accept", qAccept); err != nil {
				return err
			}
		}

	}

	if o.ContentDescription != nil {

		// query param Content-Description
		var qrContentDescription string
		if o.ContentDescription != nil {
			qrContentDescription = *o.ContentDescription
		}
		qContentDescription := qrContentDescription
		if qContentDescription != "" {
			if err := r.SetQueryParam("Content-Description", qContentDescription); err != nil {
				return err
			}
		}

	}

	if o.ContentDisposition != nil {

		// query param Content-Disposition
		var qrContentDisposition string
		if o.ContentDisposition != nil {
			qrContentDisposition = *o.ContentDisposition
		}
		qContentDisposition := qrContentDisposition
		if qContentDisposition != "" {
			if err := r.SetQueryParam("Content-Disposition", qContentDisposition); err != nil {
				return err
			}
		}

	}

	if o.ContentLocation != nil {

		// query param Content-Location
		var qrContentLocation string
		if o.ContentLocation != nil {
			qrContentLocation = *o.ContentLocation
		}
		qContentLocation := qrContentLocation
		if qContentLocation != "" {
			if err := r.SetQueryParam("Content-Location", qContentLocation); err != nil {
				return err
			}
		}

	}

	if o.ContentType != nil {

		// query param Content-Type
		var qrContentType string
		if o.ContentType != nil {
			qrContentType = *o.ContentType
		}
		qContentType := qrContentType
		if qContentType != "" {
			if err := r.SetQueryParam("Content-Type", qContentType); err != nil {
				return err
			}
		}

	}

	if o.CreateFolders != nil {

		// query param createFolders
		var qrCreateFolders bool
		if o.CreateFolders != nil {
			qrCreateFolders = *o.CreateFolders
		}
		qCreateFolders := swag.FormatBool(qrCreateFolders)
		if qCreateFolders != "" {
			if err := r.SetQueryParam("createFolders", qCreateFolders); err != nil {
				return err
			}
		}

	}

	if o.Expanded != nil {

		// query param expanded
		var qrExpanded bool
		if o.Expanded != nil {
			qrExpanded = *o.Expanded
		}
		qExpanded := swag.FormatBool(qrExpanded)
		if qExpanded != "" {
			if err := r.SetQueryParam("expanded", qExpanded); err != nil {
				return err
			}
		}

	}

	if o.Overwrite != nil {

		// query param overwrite
		var qrOverwrite bool
		if o.Overwrite != nil {
			qrOverwrite = *o.Overwrite
		}
		qOverwrite := swag.FormatBool(qrOverwrite)
		if qOverwrite != "" {
			if err := r.SetQueryParam("overwrite", qOverwrite); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
