package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/swag"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// NewUpdateJobsParams creates a new UpdateJobsParams object
// with the default values initialized.
func NewUpdateJobsParams() *UpdateJobsParams {
	var (
		replaceTriggerIgnoreTypeDefault bool = bool(false)
	)
	return &UpdateJobsParams{
		ReplaceTriggerIgnoreType: &replaceTriggerIgnoreTypeDefault,
	}
}

/*UpdateJobsParams contains all the parameters to send to the API endpoint
for the update jobs operation typically these are written to a http.Request
*/
type UpdateJobsParams struct {

	/*ID*/
	ID *string
	/*ReplaceTriggerIgnoreType*/
	ReplaceTriggerIgnoreType *bool
}

// WithID adds the id to the update jobs params
func (o *UpdateJobsParams) WithID(id *string) *UpdateJobsParams {
	o.ID = id
	return o
}

// WithReplaceTriggerIgnoreType adds the replaceTriggerIgnoreType to the update jobs params
func (o *UpdateJobsParams) WithReplaceTriggerIgnoreType(replaceTriggerIgnoreType *bool) *UpdateJobsParams {
	o.ReplaceTriggerIgnoreType = replaceTriggerIgnoreType
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateJobsParams) WriteToRequest(r client.Request, reg strfmt.Registry) error {

	var res []error

	if o.ID != nil {

		// query param id
		var qrID string
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.ReplaceTriggerIgnoreType != nil {

		// query param replaceTriggerIgnoreType
		var qrReplaceTriggerIgnoreType bool
		if o.ReplaceTriggerIgnoreType != nil {
			qrReplaceTriggerIgnoreType = *o.ReplaceTriggerIgnoreType
		}
		qReplaceTriggerIgnoreType := swag.FormatBool(qrReplaceTriggerIgnoreType)
		if qReplaceTriggerIgnoreType != "" {
			if err := r.SetQueryParam("replaceTriggerIgnoreType", qReplaceTriggerIgnoreType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
