package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetReportOutputResourceParams creates a new GetReportOutputResourceParams object
// with the default values initialized.
func NewGetReportOutputResourceParams() *GetReportOutputResourceParams {
	var (
		allowInlineScriptsDefault bool = bool(true)
		freshDataDefault          bool = bool(false)
		interactiveDefault        bool = bool(true)
		saveDataSnapshotDefault   bool = bool(false)
	)
	return &GetReportOutputResourceParams{
		AllowInlineScripts: &allowInlineScriptsDefault,
		FreshData:          &freshDataDefault,
		Interactive:        &interactiveDefault,
		SaveDataSnapshot:   &saveDataSnapshotDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetReportOutputResourceParamsWithTimeout creates a new GetReportOutputResourceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetReportOutputResourceParamsWithTimeout(timeout time.Duration) *GetReportOutputResourceParams {
	var (
		allowInlineScriptsDefault bool = bool(true)
		freshDataDefault          bool = bool(false)
		interactiveDefault        bool = bool(true)
		saveDataSnapshotDefault   bool = bool(false)
	)
	return &GetReportOutputResourceParams{
		AllowInlineScripts: &allowInlineScriptsDefault,
		FreshData:          &freshDataDefault,
		Interactive:        &interactiveDefault,
		SaveDataSnapshot:   &saveDataSnapshotDefault,

		timeout: timeout,
	}
}

/*GetReportOutputResourceParams contains all the parameters to send to the API endpoint
for the get report output resource operation typically these are written to a http.Request
*/
type GetReportOutputResourceParams struct {

	/*AllowInlineScripts*/
	AllowInlineScripts *bool
	/*Anchor*/
	Anchor *string
	/*AttachmentsPrefix*/
	AttachmentsPrefix *string
	/*BaseURL*/
	BaseURL *string
	/*FreshData*/
	FreshData *bool
	/*IgnorePagination*/
	IgnorePagination *bool
	/*Interactive*/
	Interactive *bool
	/*MarkupType*/
	MarkupType *string
	/*OutputFormat*/
	OutputFormat *string
	/*Page*/
	Page *int32
	/*Pages*/
	Pages *string
	/*ReportUnitURI*/
	ReportUnitURI *string
	/*SaveDataSnapshot*/
	SaveDataSnapshot *bool
	/*TransformerKey*/
	TransformerKey *string
	/*XJrsBaseURL*/
	XJrsBaseURL *string

	timeout time.Duration
}

// WithAllowInlineScripts adds the allowInlineScripts to the get report output resource params
func (o *GetReportOutputResourceParams) WithAllowInlineScripts(AllowInlineScripts *bool) *GetReportOutputResourceParams {
	o.AllowInlineScripts = AllowInlineScripts
	return o
}

// WithAnchor adds the anchor to the get report output resource params
func (o *GetReportOutputResourceParams) WithAnchor(Anchor *string) *GetReportOutputResourceParams {
	o.Anchor = Anchor
	return o
}

// WithAttachmentsPrefix adds the attachmentsPrefix to the get report output resource params
func (o *GetReportOutputResourceParams) WithAttachmentsPrefix(AttachmentsPrefix *string) *GetReportOutputResourceParams {
	o.AttachmentsPrefix = AttachmentsPrefix
	return o
}

// WithBaseURL adds the baseUrl to the get report output resource params
func (o *GetReportOutputResourceParams) WithBaseURL(BaseURL *string) *GetReportOutputResourceParams {
	o.BaseURL = BaseURL
	return o
}

// WithFreshData adds the freshData to the get report output resource params
func (o *GetReportOutputResourceParams) WithFreshData(FreshData *bool) *GetReportOutputResourceParams {
	o.FreshData = FreshData
	return o
}

// WithIgnorePagination adds the ignorePagination to the get report output resource params
func (o *GetReportOutputResourceParams) WithIgnorePagination(IgnorePagination *bool) *GetReportOutputResourceParams {
	o.IgnorePagination = IgnorePagination
	return o
}

// WithInteractive adds the interactive to the get report output resource params
func (o *GetReportOutputResourceParams) WithInteractive(Interactive *bool) *GetReportOutputResourceParams {
	o.Interactive = Interactive
	return o
}

// WithMarkupType adds the markupType to the get report output resource params
func (o *GetReportOutputResourceParams) WithMarkupType(MarkupType *string) *GetReportOutputResourceParams {
	o.MarkupType = MarkupType
	return o
}

// WithOutputFormat adds the outputFormat to the get report output resource params
func (o *GetReportOutputResourceParams) WithOutputFormat(OutputFormat *string) *GetReportOutputResourceParams {
	o.OutputFormat = OutputFormat
	return o
}

// WithPage adds the page to the get report output resource params
func (o *GetReportOutputResourceParams) WithPage(Page *int32) *GetReportOutputResourceParams {
	o.Page = Page
	return o
}

// WithPages adds the pages to the get report output resource params
func (o *GetReportOutputResourceParams) WithPages(Pages *string) *GetReportOutputResourceParams {
	o.Pages = Pages
	return o
}

// WithReportUnitURI adds the reportUnitUri to the get report output resource params
func (o *GetReportOutputResourceParams) WithReportUnitURI(ReportUnitURI *string) *GetReportOutputResourceParams {
	o.ReportUnitURI = ReportUnitURI
	return o
}

// WithSaveDataSnapshot adds the saveDataSnapshot to the get report output resource params
func (o *GetReportOutputResourceParams) WithSaveDataSnapshot(SaveDataSnapshot *bool) *GetReportOutputResourceParams {
	o.SaveDataSnapshot = SaveDataSnapshot
	return o
}

// WithTransformerKey adds the transformerKey to the get report output resource params
func (o *GetReportOutputResourceParams) WithTransformerKey(TransformerKey *string) *GetReportOutputResourceParams {
	o.TransformerKey = TransformerKey
	return o
}

// WithXJrsBaseURL adds the xJrsBaseUrl to the get report output resource params
func (o *GetReportOutputResourceParams) WithXJrsBaseURL(XJrsBaseURL *string) *GetReportOutputResourceParams {
	o.XJrsBaseURL = XJrsBaseURL
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetReportOutputResourceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.AllowInlineScripts != nil {

		// query param allowInlineScripts
		var qrAllowInlineScripts bool
		if o.AllowInlineScripts != nil {
			qrAllowInlineScripts = *o.AllowInlineScripts
		}
		qAllowInlineScripts := swag.FormatBool(qrAllowInlineScripts)
		if qAllowInlineScripts != "" {
			if err := r.SetQueryParam("allowInlineScripts", qAllowInlineScripts); err != nil {
				return err
			}
		}

	}

	if o.Anchor != nil {

		// query param anchor
		var qrAnchor string
		if o.Anchor != nil {
			qrAnchor = *o.Anchor
		}
		qAnchor := qrAnchor
		if qAnchor != "" {
			if err := r.SetQueryParam("anchor", qAnchor); err != nil {
				return err
			}
		}

	}

	if o.AttachmentsPrefix != nil {

		// query param attachmentsPrefix
		var qrAttachmentsPrefix string
		if o.AttachmentsPrefix != nil {
			qrAttachmentsPrefix = *o.AttachmentsPrefix
		}
		qAttachmentsPrefix := qrAttachmentsPrefix
		if qAttachmentsPrefix != "" {
			if err := r.SetQueryParam("attachmentsPrefix", qAttachmentsPrefix); err != nil {
				return err
			}
		}

	}

	if o.BaseURL != nil {

		// query param baseUrl
		var qrBaseURL string
		if o.BaseURL != nil {
			qrBaseURL = *o.BaseURL
		}
		qBaseURL := qrBaseURL
		if qBaseURL != "" {
			if err := r.SetQueryParam("baseUrl", qBaseURL); err != nil {
				return err
			}
		}

	}

	if o.FreshData != nil {

		// query param freshData
		var qrFreshData bool
		if o.FreshData != nil {
			qrFreshData = *o.FreshData
		}
		qFreshData := swag.FormatBool(qrFreshData)
		if qFreshData != "" {
			if err := r.SetQueryParam("freshData", qFreshData); err != nil {
				return err
			}
		}

	}

	if o.IgnorePagination != nil {

		// query param ignorePagination
		var qrIgnorePagination bool
		if o.IgnorePagination != nil {
			qrIgnorePagination = *o.IgnorePagination
		}
		qIgnorePagination := swag.FormatBool(qrIgnorePagination)
		if qIgnorePagination != "" {
			if err := r.SetQueryParam("ignorePagination", qIgnorePagination); err != nil {
				return err
			}
		}

	}

	if o.Interactive != nil {

		// query param interactive
		var qrInteractive bool
		if o.Interactive != nil {
			qrInteractive = *o.Interactive
		}
		qInteractive := swag.FormatBool(qrInteractive)
		if qInteractive != "" {
			if err := r.SetQueryParam("interactive", qInteractive); err != nil {
				return err
			}
		}

	}

	if o.MarkupType != nil {

		// query param markupType
		var qrMarkupType string
		if o.MarkupType != nil {
			qrMarkupType = *o.MarkupType
		}
		qMarkupType := qrMarkupType
		if qMarkupType != "" {
			if err := r.SetQueryParam("markupType", qMarkupType); err != nil {
				return err
			}
		}

	}

	if o.OutputFormat != nil {

		// path param outputFormat
		if err := r.SetPathParam("outputFormat", *o.OutputFormat); err != nil {
			return err
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.Pages != nil {

		// query param pages
		var qrPages string
		if o.Pages != nil {
			qrPages = *o.Pages
		}
		qPages := qrPages
		if qPages != "" {
			if err := r.SetQueryParam("pages", qPages); err != nil {
				return err
			}
		}

	}

	if o.ReportUnitURI != nil {

		// query param reportUnitURI
		var qrReportUnitURI string
		if o.ReportUnitURI != nil {
			qrReportUnitURI = *o.ReportUnitURI
		}
		qReportUnitURI := qrReportUnitURI
		if qReportUnitURI != "" {
			if err := r.SetQueryParam("reportUnitURI", qReportUnitURI); err != nil {
				return err
			}
		}

	}

	if o.SaveDataSnapshot != nil {

		// query param saveDataSnapshot
		var qrSaveDataSnapshot bool
		if o.SaveDataSnapshot != nil {
			qrSaveDataSnapshot = *o.SaveDataSnapshot
		}
		qSaveDataSnapshot := swag.FormatBool(qrSaveDataSnapshot)
		if qSaveDataSnapshot != "" {
			if err := r.SetQueryParam("saveDataSnapshot", qSaveDataSnapshot); err != nil {
				return err
			}
		}

	}

	if o.TransformerKey != nil {

		// query param transformerKey
		var qrTransformerKey string
		if o.TransformerKey != nil {
			qrTransformerKey = *o.TransformerKey
		}
		qTransformerKey := qrTransformerKey
		if qTransformerKey != "" {
			if err := r.SetQueryParam("transformerKey", qTransformerKey); err != nil {
				return err
			}
		}

	}

	if o.XJrsBaseURL != nil {

		// query param x-jrs-base-url
		var qrXJrsBaseURL string
		if o.XJrsBaseURL != nil {
			qrXJrsBaseURL = *o.XJrsBaseURL
		}
		qXJrsBaseURL := qrXJrsBaseURL
		if qXJrsBaseURL != "" {
			if err := r.SetQueryParam("x-jrs-base-url", qXJrsBaseURL); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
