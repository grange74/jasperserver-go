package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/errors"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// NewGetReportsParams creates a new GetReportsParams object
// with the default values initialized.
func NewGetReportsParams() *GetReportsParams {
	var ()
	return &GetReportsParams{}
}

/*GetReportsParams contains all the parameters to send to the API endpoint
for the get reports operation typically these are written to a http.Request
*/
type GetReportsParams struct {

	/*FireTimeFrom*/
	FireTimeFrom *string
	/*FireTimeTo*/
	FireTimeTo *string
	/*JobID*/
	JobID *string
	/*JobLabel*/
	JobLabel *string
	/*ReportURI*/
	ReportURI *string
	/*UserName*/
	UserName *string
}

// WithFireTimeFrom adds the fireTimeFrom to the get reports params
func (o *GetReportsParams) WithFireTimeFrom(fireTimeFrom *string) *GetReportsParams {
	o.FireTimeFrom = fireTimeFrom
	return o
}

// WithFireTimeTo adds the fireTimeTo to the get reports params
func (o *GetReportsParams) WithFireTimeTo(fireTimeTo *string) *GetReportsParams {
	o.FireTimeTo = fireTimeTo
	return o
}

// WithJobID adds the jobId to the get reports params
func (o *GetReportsParams) WithJobID(jobId *string) *GetReportsParams {
	o.JobID = jobId
	return o
}

// WithJobLabel adds the jobLabel to the get reports params
func (o *GetReportsParams) WithJobLabel(jobLabel *string) *GetReportsParams {
	o.JobLabel = jobLabel
	return o
}

// WithReportURI adds the reportUri to the get reports params
func (o *GetReportsParams) WithReportURI(reportUri *string) *GetReportsParams {
	o.ReportURI = reportUri
	return o
}

// WithUserName adds the userName to the get reports params
func (o *GetReportsParams) WithUserName(userName *string) *GetReportsParams {
	o.UserName = userName
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetReportsParams) WriteToRequest(r client.Request, reg strfmt.Registry) error {

	var res []error

	if o.FireTimeFrom != nil {

		// query param fireTimeFrom
		var qrFireTimeFrom string
		if o.FireTimeFrom != nil {
			qrFireTimeFrom = *o.FireTimeFrom
		}
		qFireTimeFrom := qrFireTimeFrom
		if qFireTimeFrom != "" {
			if err := r.SetQueryParam("fireTimeFrom", qFireTimeFrom); err != nil {
				return err
			}
		}

	}

	if o.FireTimeTo != nil {

		// query param fireTimeTo
		var qrFireTimeTo string
		if o.FireTimeTo != nil {
			qrFireTimeTo = *o.FireTimeTo
		}
		qFireTimeTo := qrFireTimeTo
		if qFireTimeTo != "" {
			if err := r.SetQueryParam("fireTimeTo", qFireTimeTo); err != nil {
				return err
			}
		}

	}

	if o.JobID != nil {

		// query param jobID
		var qrJobID string
		if o.JobID != nil {
			qrJobID = *o.JobID
		}
		qJobID := qrJobID
		if qJobID != "" {
			if err := r.SetQueryParam("jobID", qJobID); err != nil {
				return err
			}
		}

	}

	if o.JobLabel != nil {

		// query param jobLabel
		var qrJobLabel string
		if o.JobLabel != nil {
			qrJobLabel = *o.JobLabel
		}
		qJobLabel := qrJobLabel
		if qJobLabel != "" {
			if err := r.SetQueryParam("jobLabel", qJobLabel); err != nil {
				return err
			}
		}

	}

	if o.ReportURI != nil {

		// query param reportURI
		var qrReportURI string
		if o.ReportURI != nil {
			qrReportURI = *o.ReportURI
		}
		qReportURI := qrReportURI
		if qReportURI != "" {
			if err := r.SetQueryParam("reportURI", qReportURI); err != nil {
				return err
			}
		}

	}

	if o.UserName != nil {

		// query param userName
		var qrUserName string
		if o.UserName != nil {
			qrUserName = *o.UserName
		}
		qUserName := qrUserName
		if qUserName != "" {
			if err := r.SetQueryParam("userName", qUserName); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
