package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSpecificAttributeParams creates a new GetSpecificAttributeParams object
// with the default values initialized.
func NewGetSpecificAttributeParams() *GetSpecificAttributeParams {
	var ()
	return &GetSpecificAttributeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSpecificAttributeParamsWithTimeout creates a new GetSpecificAttributeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSpecificAttributeParamsWithTimeout(timeout time.Duration) *GetSpecificAttributeParams {
	var ()
	return &GetSpecificAttributeParams{

		timeout: timeout,
	}
}

/*GetSpecificAttributeParams contains all the parameters to send to the API endpoint
for the get specific attribute operation typically these are written to a http.Request
*/
type GetSpecificAttributeParams struct {

	/*Accept*/
	Accept *string
	/*Embedded*/
	Embedded *string
	/*AttrName*/
	AttrName *string

	timeout time.Duration
}

// WithAccept adds the accept to the get specific attribute params
func (o *GetSpecificAttributeParams) WithAccept(Accept *string) *GetSpecificAttributeParams {
	o.Accept = Accept
	return o
}

// WithEmbedded adds the embedded to the get specific attribute params
func (o *GetSpecificAttributeParams) WithEmbedded(Embedded *string) *GetSpecificAttributeParams {
	o.Embedded = Embedded
	return o
}

// WithAttrName adds the attrName to the get specific attribute params
func (o *GetSpecificAttributeParams) WithAttrName(AttrName *string) *GetSpecificAttributeParams {
	o.AttrName = AttrName
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetSpecificAttributeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Accept != nil {

		// query param Accept
		var qrAccept string
		if o.Accept != nil {
			qrAccept = *o.Accept
		}
		qAccept := qrAccept
		if qAccept != "" {
			if err := r.SetQueryParam("Accept", qAccept); err != nil {
				return err
			}
		}

	}

	if o.Embedded != nil {

		// query param _embedded
		var qrEmbedded string
		if o.Embedded != nil {
			qrEmbedded = *o.Embedded
		}
		qEmbedded := qrEmbedded
		if qEmbedded != "" {
			if err := r.SetQueryParam("_embedded", qEmbedded); err != nil {
				return err
			}
		}

	}

	if o.AttrName != nil {

		// path param attrName
		if err := r.SetPathParam("attrName", *o.AttrName); err != nil {
			return err
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
