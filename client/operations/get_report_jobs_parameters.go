package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetReportJobsParams creates a new GetReportJobsParams object
// with the default values initialized.
func NewGetReportJobsParams() *GetReportJobsParams {
	var ()
	return &GetReportJobsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetReportJobsParamsWithTimeout creates a new GetReportJobsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetReportJobsParamsWithTimeout(timeout time.Duration) *GetReportJobsParams {
	var ()
	return &GetReportJobsParams{

		timeout: timeout,
	}
}

/*GetReportJobsParams contains all the parameters to send to the API endpoint
for the get report jobs operation typically these are written to a http.Request
*/
type GetReportJobsParams struct {

	/*Example*/
	Example *string
	/*IsAscending*/
	IsAscending *bool
	/*Label*/
	Label *string
	/*NextFireTime*/
	NextFireTime *string
	/*NumberOfRows*/
	NumberOfRows *int32
	/*Owner*/
	Owner *string
	/*PreviousFireTime*/
	PreviousFireTime *string
	/*ReportUnitURI*/
	ReportUnitURI *string
	/*SortType*/
	SortType *string
	/*StartIndex*/
	StartIndex *int32
	/*State*/
	State *string

	timeout time.Duration
}

// WithExample adds the example to the get report jobs params
func (o *GetReportJobsParams) WithExample(Example *string) *GetReportJobsParams {
	o.Example = Example
	return o
}

// WithIsAscending adds the isAscending to the get report jobs params
func (o *GetReportJobsParams) WithIsAscending(IsAscending *bool) *GetReportJobsParams {
	o.IsAscending = IsAscending
	return o
}

// WithLabel adds the label to the get report jobs params
func (o *GetReportJobsParams) WithLabel(Label *string) *GetReportJobsParams {
	o.Label = Label
	return o
}

// WithNextFireTime adds the nextFireTime to the get report jobs params
func (o *GetReportJobsParams) WithNextFireTime(NextFireTime *string) *GetReportJobsParams {
	o.NextFireTime = NextFireTime
	return o
}

// WithNumberOfRows adds the numberOfRows to the get report jobs params
func (o *GetReportJobsParams) WithNumberOfRows(NumberOfRows *int32) *GetReportJobsParams {
	o.NumberOfRows = NumberOfRows
	return o
}

// WithOwner adds the owner to the get report jobs params
func (o *GetReportJobsParams) WithOwner(Owner *string) *GetReportJobsParams {
	o.Owner = Owner
	return o
}

// WithPreviousFireTime adds the previousFireTime to the get report jobs params
func (o *GetReportJobsParams) WithPreviousFireTime(PreviousFireTime *string) *GetReportJobsParams {
	o.PreviousFireTime = PreviousFireTime
	return o
}

// WithReportUnitURI adds the reportUnitUri to the get report jobs params
func (o *GetReportJobsParams) WithReportUnitURI(ReportUnitURI *string) *GetReportJobsParams {
	o.ReportUnitURI = ReportUnitURI
	return o
}

// WithSortType adds the sortType to the get report jobs params
func (o *GetReportJobsParams) WithSortType(SortType *string) *GetReportJobsParams {
	o.SortType = SortType
	return o
}

// WithStartIndex adds the startIndex to the get report jobs params
func (o *GetReportJobsParams) WithStartIndex(StartIndex *int32) *GetReportJobsParams {
	o.StartIndex = StartIndex
	return o
}

// WithState adds the state to the get report jobs params
func (o *GetReportJobsParams) WithState(State *string) *GetReportJobsParams {
	o.State = State
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetReportJobsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Example != nil {

		// query param example
		var qrExample string
		if o.Example != nil {
			qrExample = *o.Example
		}
		qExample := qrExample
		if qExample != "" {
			if err := r.SetQueryParam("example", qExample); err != nil {
				return err
			}
		}

	}

	if o.IsAscending != nil {

		// query param isAscending
		var qrIsAscending bool
		if o.IsAscending != nil {
			qrIsAscending = *o.IsAscending
		}
		qIsAscending := swag.FormatBool(qrIsAscending)
		if qIsAscending != "" {
			if err := r.SetQueryParam("isAscending", qIsAscending); err != nil {
				return err
			}
		}

	}

	if o.Label != nil {

		// query param label
		var qrLabel string
		if o.Label != nil {
			qrLabel = *o.Label
		}
		qLabel := qrLabel
		if qLabel != "" {
			if err := r.SetQueryParam("label", qLabel); err != nil {
				return err
			}
		}

	}

	if o.NextFireTime != nil {

		// query param nextFireTime
		var qrNextFireTime string
		if o.NextFireTime != nil {
			qrNextFireTime = *o.NextFireTime
		}
		qNextFireTime := qrNextFireTime
		if qNextFireTime != "" {
			if err := r.SetQueryParam("nextFireTime", qNextFireTime); err != nil {
				return err
			}
		}

	}

	if o.NumberOfRows != nil {

		// query param numberOfRows
		var qrNumberOfRows int32
		if o.NumberOfRows != nil {
			qrNumberOfRows = *o.NumberOfRows
		}
		qNumberOfRows := swag.FormatInt32(qrNumberOfRows)
		if qNumberOfRows != "" {
			if err := r.SetQueryParam("numberOfRows", qNumberOfRows); err != nil {
				return err
			}
		}

	}

	if o.Owner != nil {

		// query param owner
		var qrOwner string
		if o.Owner != nil {
			qrOwner = *o.Owner
		}
		qOwner := qrOwner
		if qOwner != "" {
			if err := r.SetQueryParam("owner", qOwner); err != nil {
				return err
			}
		}

	}

	if o.PreviousFireTime != nil {

		// query param previousFireTime
		var qrPreviousFireTime string
		if o.PreviousFireTime != nil {
			qrPreviousFireTime = *o.PreviousFireTime
		}
		qPreviousFireTime := qrPreviousFireTime
		if qPreviousFireTime != "" {
			if err := r.SetQueryParam("previousFireTime", qPreviousFireTime); err != nil {
				return err
			}
		}

	}

	if o.ReportUnitURI != nil {

		// query param reportUnitURI
		var qrReportUnitURI string
		if o.ReportUnitURI != nil {
			qrReportUnitURI = *o.ReportUnitURI
		}
		qReportUnitURI := qrReportUnitURI
		if qReportUnitURI != "" {
			if err := r.SetQueryParam("reportUnitURI", qReportUnitURI); err != nil {
				return err
			}
		}

	}

	if o.SortType != nil {

		// query param sortType
		var qrSortType string
		if o.SortType != nil {
			qrSortType = *o.SortType
		}
		qSortType := qrSortType
		if qSortType != "" {
			if err := r.SetQueryParam("sortType", qSortType); err != nil {
				return err
			}
		}

	}

	if o.StartIndex != nil {

		// query param startIndex
		var qrStartIndex int32
		if o.StartIndex != nil {
			qrStartIndex = *o.StartIndex
		}
		qStartIndex := swag.FormatInt32(qrStartIndex)
		if qStartIndex != "" {
			if err := r.SetQueryParam("startIndex", qStartIndex); err != nil {
				return err
			}
		}

	}

	if o.State != nil {

		// query param state
		var qrState string
		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {
			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
