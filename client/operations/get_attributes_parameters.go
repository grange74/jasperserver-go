package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/errors"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// NewGetAttributesParams creates a new GetAttributesParams object
// with the default values initialized.
func NewGetAttributesParams() *GetAttributesParams {
	var ()
	return &GetAttributesParams{}
}

/*GetAttributesParams contains all the parameters to send to the API endpoint
for the get attributes operation typically these are written to a http.Request
*/
type GetAttributesParams struct {

	/*Accept*/
	Accept *string
	/*Embedded*/
	Embedded *string
	/*Name*/
	Name *string
}

// WithAccept adds the accept to the get attributes params
func (o *GetAttributesParams) WithAccept(accept *string) *GetAttributesParams {
	o.Accept = accept
	return o
}

// WithEmbedded adds the embedded to the get attributes params
func (o *GetAttributesParams) WithEmbedded(embedded *string) *GetAttributesParams {
	o.Embedded = embedded
	return o
}

// WithName adds the name to the get attributes params
func (o *GetAttributesParams) WithName(name *string) *GetAttributesParams {
	o.Name = name
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetAttributesParams) WriteToRequest(r client.Request, reg strfmt.Registry) error {

	var res []error

	if o.Accept != nil {

		// query param Accept
		var qrAccept string
		if o.Accept != nil {
			qrAccept = *o.Accept
		}
		qAccept := qrAccept
		if qAccept != "" {
			if err := r.SetQueryParam("Accept", qAccept); err != nil {
				return err
			}
		}

	}

	if o.Embedded != nil {

		// query param _embedded
		var qrEmbedded string
		if o.Embedded != nil {
			qrEmbedded = *o.Embedded
		}
		qEmbedded := qrEmbedded
		if qEmbedded != "" {
			if err := r.SetQueryParam("_embedded", qEmbedded); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
