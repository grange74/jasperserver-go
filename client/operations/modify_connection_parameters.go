package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/errors"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// NewModifyConnectionParams creates a new ModifyConnectionParams object
// with the default values initialized.
func NewModifyConnectionParams() *ModifyConnectionParams {
	var ()
	return &ModifyConnectionParams{}
}

/*ModifyConnectionParams contains all the parameters to send to the API endpoint
for the modify connection operation typically these are written to a http.Request
*/
type ModifyConnectionParams struct {

	/*ContentType*/
	ContentType *string
	/*UUID*/
	UUID *string
}

// WithContentType adds the contentType to the modify connection params
func (o *ModifyConnectionParams) WithContentType(contentType *string) *ModifyConnectionParams {
	o.ContentType = contentType
	return o
}

// WithUUID adds the uuid to the modify connection params
func (o *ModifyConnectionParams) WithUUID(uuid *string) *ModifyConnectionParams {
	o.UUID = uuid
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *ModifyConnectionParams) WriteToRequest(r client.Request, reg strfmt.Registry) error {

	var res []error

	if o.ContentType != nil {

		// query param Content-Type
		var qrContentType string
		if o.ContentType != nil {
			qrContentType = *o.ContentType
		}
		qContentType := qrContentType
		if qContentType != "" {
			if err := r.SetQueryParam("Content-Type", qContentType); err != nil {
				return err
			}
		}

	}

	if o.UUID != nil {

		// path param uuid
		if err := r.SetPathParam("uuid", *o.UUID); err != nil {
			return err
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
