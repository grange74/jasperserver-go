package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPutCalendarParams creates a new PutCalendarParams object
// with the default values initialized.
func NewPutCalendarParams() *PutCalendarParams {
	var (
		replaceDefault        bool = bool(false)
		updateTriggersDefault bool = bool(false)
	)
	return &PutCalendarParams{
		Replace:        &replaceDefault,
		UpdateTriggers: &updateTriggersDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewPutCalendarParamsWithTimeout creates a new PutCalendarParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutCalendarParamsWithTimeout(timeout time.Duration) *PutCalendarParams {
	var (
		replaceDefault        bool = bool(false)
		updateTriggersDefault bool = bool(false)
	)
	return &PutCalendarParams{
		Replace:        &replaceDefault,
		UpdateTriggers: &updateTriggersDefault,

		timeout: timeout,
	}
}

/*PutCalendarParams contains all the parameters to send to the API endpoint
for the put calendar operation typically these are written to a http.Request
*/
type PutCalendarParams struct {

	/*CalendarName*/
	CalendarName *string
	/*Replace*/
	Replace *bool
	/*UpdateTriggers*/
	UpdateTriggers *bool

	timeout time.Duration
}

// WithCalendarName adds the calendarName to the put calendar params
func (o *PutCalendarParams) WithCalendarName(CalendarName *string) *PutCalendarParams {
	o.CalendarName = CalendarName
	return o
}

// WithReplace adds the replace to the put calendar params
func (o *PutCalendarParams) WithReplace(Replace *bool) *PutCalendarParams {
	o.Replace = Replace
	return o
}

// WithUpdateTriggers adds the updateTriggers to the put calendar params
func (o *PutCalendarParams) WithUpdateTriggers(UpdateTriggers *bool) *PutCalendarParams {
	o.UpdateTriggers = UpdateTriggers
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *PutCalendarParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.CalendarName != nil {

		// path param calendarName
		if err := r.SetPathParam("calendarName", *o.CalendarName); err != nil {
			return err
		}

	}

	if o.Replace != nil {

		// query param replace
		var qrReplace bool
		if o.Replace != nil {
			qrReplace = *o.Replace
		}
		qReplace := swag.FormatBool(qrReplace)
		if qReplace != "" {
			if err := r.SetQueryParam("replace", qReplace); err != nil {
				return err
			}
		}

	}

	if o.UpdateTriggers != nil {

		// query param updateTriggers
		var qrUpdateTriggers bool
		if o.UpdateTriggers != nil {
			qrUpdateTriggers = *o.UpdateTriggers
		}
		qUpdateTriggers := swag.FormatBool(qrUpdateTriggers)
		if qUpdateTriggers != "" {
			if err := r.SetQueryParam("updateTriggers", qUpdateTriggers); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
