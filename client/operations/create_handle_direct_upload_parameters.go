package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCreateHandleDirectUploadParams creates a new CreateHandleDirectUploadParams object
// with the default values initialized.
func NewCreateHandleDirectUploadParams() *CreateHandleDirectUploadParams {
	var (
		includeAccessEventsDefault     bool = bool(false)
		includeAuditEventsDefault      bool = bool(false)
		includeMonitoringEventsDefault bool = bool(false)
		includeServerSettingsDefault   bool = bool(false)
		skipUserUpdateDefault          bool = bool(false)
		updateDefault                  bool = bool(false)
	)
	return &CreateHandleDirectUploadParams{
		IncludeAccessEvents:     &includeAccessEventsDefault,
		IncludeAuditEvents:      &includeAuditEventsDefault,
		IncludeMonitoringEvents: &includeMonitoringEventsDefault,
		IncludeServerSettings:   &includeServerSettingsDefault,
		SkipUserUpdate:          &skipUserUpdateDefault,
		Update:                  &updateDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateHandleDirectUploadParamsWithTimeout creates a new CreateHandleDirectUploadParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateHandleDirectUploadParamsWithTimeout(timeout time.Duration) *CreateHandleDirectUploadParams {
	var (
		includeAccessEventsDefault     bool = bool(false)
		includeAuditEventsDefault      bool = bool(false)
		includeMonitoringEventsDefault bool = bool(false)
		includeServerSettingsDefault   bool = bool(false)
		skipUserUpdateDefault          bool = bool(false)
		updateDefault                  bool = bool(false)
	)
	return &CreateHandleDirectUploadParams{
		IncludeAccessEvents:     &includeAccessEventsDefault,
		IncludeAuditEvents:      &includeAuditEventsDefault,
		IncludeMonitoringEvents: &includeMonitoringEventsDefault,
		IncludeServerSettings:   &includeServerSettingsDefault,
		SkipUserUpdate:          &skipUserUpdateDefault,
		Update:                  &updateDefault,

		timeout: timeout,
	}
}

/*CreateHandleDirectUploadParams contains all the parameters to send to the API endpoint
for the create handle direct upload operation typically these are written to a http.Request
*/
type CreateHandleDirectUploadParams struct {

	/*IncludeAccessEvents*/
	IncludeAccessEvents *bool
	/*IncludeAuditEvents*/
	IncludeAuditEvents *bool
	/*IncludeMonitoringEvents*/
	IncludeMonitoringEvents *bool
	/*IncludeServerSettings*/
	IncludeServerSettings *bool
	/*SkipUserUpdate*/
	SkipUserUpdate *bool
	/*Update*/
	Update *bool

	timeout time.Duration
}

// WithIncludeAccessEvents adds the includeAccessEvents to the create handle direct upload params
func (o *CreateHandleDirectUploadParams) WithIncludeAccessEvents(IncludeAccessEvents *bool) *CreateHandleDirectUploadParams {
	o.IncludeAccessEvents = IncludeAccessEvents
	return o
}

// WithIncludeAuditEvents adds the includeAuditEvents to the create handle direct upload params
func (o *CreateHandleDirectUploadParams) WithIncludeAuditEvents(IncludeAuditEvents *bool) *CreateHandleDirectUploadParams {
	o.IncludeAuditEvents = IncludeAuditEvents
	return o
}

// WithIncludeMonitoringEvents adds the includeMonitoringEvents to the create handle direct upload params
func (o *CreateHandleDirectUploadParams) WithIncludeMonitoringEvents(IncludeMonitoringEvents *bool) *CreateHandleDirectUploadParams {
	o.IncludeMonitoringEvents = IncludeMonitoringEvents
	return o
}

// WithIncludeServerSettings adds the includeServerSettings to the create handle direct upload params
func (o *CreateHandleDirectUploadParams) WithIncludeServerSettings(IncludeServerSettings *bool) *CreateHandleDirectUploadParams {
	o.IncludeServerSettings = IncludeServerSettings
	return o
}

// WithSkipUserUpdate adds the skipUserUpdate to the create handle direct upload params
func (o *CreateHandleDirectUploadParams) WithSkipUserUpdate(SkipUserUpdate *bool) *CreateHandleDirectUploadParams {
	o.SkipUserUpdate = SkipUserUpdate
	return o
}

// WithUpdate adds the update to the create handle direct upload params
func (o *CreateHandleDirectUploadParams) WithUpdate(Update *bool) *CreateHandleDirectUploadParams {
	o.Update = Update
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *CreateHandleDirectUploadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.IncludeAccessEvents != nil {

		// query param includeAccessEvents
		var qrIncludeAccessEvents bool
		if o.IncludeAccessEvents != nil {
			qrIncludeAccessEvents = *o.IncludeAccessEvents
		}
		qIncludeAccessEvents := swag.FormatBool(qrIncludeAccessEvents)
		if qIncludeAccessEvents != "" {
			if err := r.SetQueryParam("includeAccessEvents", qIncludeAccessEvents); err != nil {
				return err
			}
		}

	}

	if o.IncludeAuditEvents != nil {

		// query param includeAuditEvents
		var qrIncludeAuditEvents bool
		if o.IncludeAuditEvents != nil {
			qrIncludeAuditEvents = *o.IncludeAuditEvents
		}
		qIncludeAuditEvents := swag.FormatBool(qrIncludeAuditEvents)
		if qIncludeAuditEvents != "" {
			if err := r.SetQueryParam("includeAuditEvents", qIncludeAuditEvents); err != nil {
				return err
			}
		}

	}

	if o.IncludeMonitoringEvents != nil {

		// query param includeMonitoringEvents
		var qrIncludeMonitoringEvents bool
		if o.IncludeMonitoringEvents != nil {
			qrIncludeMonitoringEvents = *o.IncludeMonitoringEvents
		}
		qIncludeMonitoringEvents := swag.FormatBool(qrIncludeMonitoringEvents)
		if qIncludeMonitoringEvents != "" {
			if err := r.SetQueryParam("includeMonitoringEvents", qIncludeMonitoringEvents); err != nil {
				return err
			}
		}

	}

	if o.IncludeServerSettings != nil {

		// query param includeServerSettings
		var qrIncludeServerSettings bool
		if o.IncludeServerSettings != nil {
			qrIncludeServerSettings = *o.IncludeServerSettings
		}
		qIncludeServerSettings := swag.FormatBool(qrIncludeServerSettings)
		if qIncludeServerSettings != "" {
			if err := r.SetQueryParam("includeServerSettings", qIncludeServerSettings); err != nil {
				return err
			}
		}

	}

	if o.SkipUserUpdate != nil {

		// query param skipUserUpdate
		var qrSkipUserUpdate bool
		if o.SkipUserUpdate != nil {
			qrSkipUserUpdate = *o.SkipUserUpdate
		}
		qSkipUserUpdate := swag.FormatBool(qrSkipUserUpdate)
		if qSkipUserUpdate != "" {
			if err := r.SetQueryParam("skipUserUpdate", qSkipUserUpdate); err != nil {
				return err
			}
		}

	}

	if o.Update != nil {

		// query param update
		var qrUpdate bool
		if o.Update != nil {
			qrUpdate = *o.Update
		}
		qUpdate := swag.FormatBool(qrUpdate)
		if qUpdate != "" {
			if err := r.SetQueryParam("update", qUpdate); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
