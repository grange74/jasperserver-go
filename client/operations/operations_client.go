package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateExport create export API
*/
func (a *Client) CreateExport(params *CreateExportParams) (*CreateExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateExportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Create_export_",
		Method:             "POST",
		PathPattern:        "/{executionId}/exports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateExportReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateExportOK), nil
}

/*
CreateGetInputControlsInitialValuesViaPost create get input controls initial values via post API
*/
func (a *Client) CreateGetInputControlsInitialValuesViaPost(params *CreateGetInputControlsInitialValuesViaPostParams) (*CreateGetInputControlsInitialValuesViaPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGetInputControlsInitialValuesViaPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Create_getInputControlsInitialValuesViaPost_",
		Method:             "POST",
		PathPattern:        "/values",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateGetInputControlsInitialValuesViaPostReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateGetInputControlsInitialValuesViaPostOK), nil
}

/*
CreateGetReportInputControlValuesViaPost create get report input control values via post API
*/
func (a *Client) CreateGetReportInputControlValuesViaPost(params *CreateGetReportInputControlValuesViaPostParams) (*CreateGetReportInputControlValuesViaPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGetReportInputControlValuesViaPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Create_getReportInputControlValuesViaPost_",
		Method:             "POST",
		PathPattern:        "/{inputControlIds: [^;/]+(;[^;/]+)*}/values",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateGetReportInputControlValuesViaPostReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateGetReportInputControlValuesViaPostOK), nil
}

/*
CreateGetReportInputParametersForSpecifiedInputControlsViaPost create get report input parameters for specified input controls via post API
*/
func (a *Client) CreateGetReportInputParametersForSpecifiedInputControlsViaPost(params *CreateGetReportInputParametersForSpecifiedInputControlsViaPostParams) (*CreateGetReportInputParametersForSpecifiedInputControlsViaPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGetReportInputParametersForSpecifiedInputControlsViaPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Create_getReportInputParametersForSpecifiedInputControlsViaPost_",
		Method:             "POST",
		PathPattern:        "/{inputControlIds: [^;/]+(;[^;/]+)*}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateGetReportInputParametersForSpecifiedInputControlsViaPostReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateGetReportInputParametersForSpecifiedInputControlsViaPostOK), nil
}

/*
CreateGetReportInputParametersViaPost create get report input parameters via post API
*/
func (a *Client) CreateGetReportInputParametersViaPost(params *CreateGetReportInputParametersViaPostParams) (*CreateGetReportInputParametersViaPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGetReportInputParametersViaPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Create_getReportInputParametersViaPost_",
		Method:             "POST",
		PathPattern:        "/{executionId}/parameters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateGetReportInputParametersViaPostReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateGetReportInputParametersViaPostOK), nil
}

/*
CreateGetReportOutputMetadata create get report output metadata API
*/
func (a *Client) CreateGetReportOutputMetadata(params *CreateGetReportOutputMetadataParams) (*CreateGetReportOutputMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGetReportOutputMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Create_getReportOutputMetadata_",
		Method:             "POST",
		PathPattern:        "/reportExecutions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateGetReportOutputMetadataReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateGetReportOutputMetadataOK), nil
}

/*
CreateGetThumbnailsFormEncoded create get thumbnails form encoded API
*/
func (a *Client) CreateGetThumbnailsFormEncoded(params *CreateGetThumbnailsFormEncodedParams) (*CreateGetThumbnailsFormEncodedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGetThumbnailsFormEncodedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Create_getThumbnailsFormEncoded_",
		Method:             "POST",
		PathPattern:        "/thumbnails",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateGetThumbnailsFormEncodedReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateGetThumbnailsFormEncodedOK), nil
}

/*
CreateHandleDirectUpload create handle direct upload API
*/
func (a *Client) CreateHandleDirectUpload(params *CreateHandleDirectUploadParams) (*CreateHandleDirectUploadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateHandleDirectUploadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Create_handleDirectUpload_",
		Method:             "POST",
		PathPattern:        "/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateHandleDirectUploadReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateHandleDirectUploadOK), nil
}

/*
CreatePause create pause API
*/
func (a *Client) CreatePause(params *CreatePauseParams) (*CreatePauseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePauseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Create_pause_",
		Method:             "POST",
		PathPattern:        "/pause",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePauseReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreatePauseOK), nil
}

/*
CreateResume create resume API
*/
func (a *Client) CreateResume(params *CreateResumeParams) (*CreateResumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Create_resume_",
		Method:             "POST",
		PathPattern:        "/resume",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateResumeReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateResumeOK), nil
}

/*
CreateScheduleJobsOnceNow create schedule jobs once now API
*/
func (a *Client) CreateScheduleJobsOnceNow(params *CreateScheduleJobsOnceNowParams) (*CreateScheduleJobsOnceNowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateScheduleJobsOnceNowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Create_scheduleJobsOnceNow_",
		Method:             "POST",
		PathPattern:        "/restart",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateScheduleJobsOnceNowReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateScheduleJobsOnceNowOK), nil
}

/*
DeleteNameAttributes delete name attributes API
*/
func (a *Client) DeleteNameAttributes(params *DeleteNameAttributesParams) (*DeleteNameAttributesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNameAttributesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteNameAttributes",
		Method:             "DELETE",
		PathPattern:        "/{name}/attributes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNameAttributesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNameAttributesOK), nil
}

/*
DeleteNameAttributesAttrName delete name attributes attr name API
*/
func (a *Client) DeleteNameAttributesAttrName(params *DeleteNameAttributesAttrNameParams) (*DeleteNameAttributesAttrNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNameAttributesAttrNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteNameAttributesAttrName",
		Method:             "DELETE",
		PathPattern:        "/{name}/attributes/{attrName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNameAttributesAttrNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNameAttributesAttrNameOK), nil
}

/*
DeleteClearCache delete clear cache API
*/
func (a *Client) DeleteClearCache(params *DeleteClearCacheParams) (*DeleteClearCacheOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClearCacheParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Delete_clearCache_",
		Method:             "DELETE",
		PathPattern:        "/{cacheId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteClearCacheReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteClearCacheOK), nil
}

/*
GetReports get reports API
*/
func (a *Client) GetReports(params *GetReportsParams) (*GetReportsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetReports",
		Method:             "GET",
		PathPattern:        "/reports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReportsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReportsOK), nil
}

/*
GetDateFormatPattern get date format pattern API
*/
func (a *Client) GetDateFormatPattern(params *GetDateFormatPatternParams) (*GetDateFormatPatternOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDateFormatPatternParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get_dateFormatPattern_",
		Method:             "GET",
		PathPattern:        "/dateFormatPattern",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDateFormatPatternReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDateFormatPatternOK), nil
}

/*
GetDatetimeFormatPattern get datetime format pattern API
*/
func (a *Client) GetDatetimeFormatPattern(params *GetDatetimeFormatPatternParams) (*GetDatetimeFormatPatternOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatetimeFormatPatternParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get_datetimeFormatPattern_",
		Method:             "GET",
		PathPattern:        "/datetimeFormatPattern",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDatetimeFormatPatternReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDatetimeFormatPatternOK), nil
}

/*
GetDiscover get discover API
*/
func (a *Client) GetDiscover(params *GetDiscoverParams) (*GetDiscoverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDiscoverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get_discover_",
		Method:             "GET",
		PathPattern:        "/{uri: .+}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDiscoverReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDiscoverOK), nil
}

/*
GetDownloadFile get download file API
*/
func (a *Client) GetDownloadFile(params *GetDownloadFileParams) (*GetDownloadFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDownloadFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Get_downloadFile_",
		Method:             "GET",
		PathPattern:        "/{id}/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDownloadFileReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDownloadFileOK), nil
}

/*
PostReportsReportUnitURIInputControls post reports report unit URI input controls API
*/
func (a *Client) PostReportsReportUnitURIInputControls(params *PostReportsReportUnitURIInputControlsParams) (*PostReportsReportUnitURIInputControlsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostReportsReportUnitURIInputControlsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostReportsReportUnitURIInputControls",
		Method:             "POST",
		PathPattern:        "/reports/{reportUnitURI: .+}/inputControls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostReportsReportUnitURIInputControlsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostReportsReportUnitURIInputControlsOK), nil
}

/*
PutNameAttributes put name attributes API
*/
func (a *Client) PutNameAttributes(params *PutNameAttributesParams) (*PutNameAttributesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutNameAttributesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutNameAttributes",
		Method:             "PUT",
		PathPattern:        "/{name}/attributes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutNameAttributesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutNameAttributesOK), nil
}

/*
PutNameAttributesAttrName put name attributes attr name API
*/
func (a *Client) PutNameAttributesAttrName(params *PutNameAttributesAttrNameParams) (*PutNameAttributesAttrNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutNameAttributesAttrNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutNameAttributesAttrName",
		Method:             "PUT",
		PathPattern:        "/{name}/attributes/{attrName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutNameAttributesAttrNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutNameAttributesAttrNameOK), nil
}

/*
UpdateCancelReportExecution update cancel report execution API
*/
func (a *Client) UpdateCancelReportExecution(params *UpdateCancelReportExecutionParams) (*UpdateCancelReportExecutionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCancelReportExecutionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Update_cancelReportExecution_",
		Method:             "PUT",
		PathPattern:        "/{executionId}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCancelReportExecutionReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateCancelReportExecutionOK), nil
}

/*
UpdateDefaultPutHandlerForRoot update default put handler for root API
*/
func (a *Client) UpdateDefaultPutHandlerForRoot(params *UpdateDefaultPutHandlerForRootParams) (*UpdateDefaultPutHandlerForRootOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDefaultPutHandlerForRootParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Update_defaultPutHandlerForRoot_",
		Method:             "PUT",
		PathPattern:        "/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDefaultPutHandlerForRootReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDefaultPutHandlerForRootOK), nil
}

/*
UpdateReorderInputControls update reorder input controls API
*/
func (a *Client) UpdateReorderInputControls(params *UpdateReorderInputControlsParams) (*UpdateReorderInputControlsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateReorderInputControlsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Update_reorderInputControls_",
		Method:             "PUT",
		PathPattern:        "/reports/{reportUnitURI: .+}/inputControls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateReorderInputControlsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateReorderInputControlsOK), nil
}

/*
UpdateScheduleJob update schedule job API
*/
func (a *Client) UpdateScheduleJob(params *UpdateScheduleJobParams) (*UpdateScheduleJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateScheduleJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Update_scheduleJob_",
		Method:             "PUT",
		PathPattern:        "/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateScheduleJobReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateScheduleJobOK), nil
}

/*
CreateConnection create connection API
*/
func (a *Client) CreateConnection(params *CreateConnectionParams) (*CreateConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateConnectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createConnection_",
		Method:             "POST",
		PathPattern:        "/connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateConnectionReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateConnectionOK), nil
}

/*
CreateFileViaFormInRoot create file via form in root API
*/
func (a *Client) CreateFileViaFormInRoot(params *CreateFileViaFormInRootParams) (*CreateFileViaFormInRootOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFileViaFormInRootParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createFileViaFormInRoot_",
		Method:             "POST",
		PathPattern:        "/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateFileViaFormInRootReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateFileViaFormInRootOK), nil
}

/*
CreateFileViaForm create file via form API
*/
func (a *Client) CreateFileViaForm(params *CreateFileViaFormParams) (*CreateFileViaFormOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFileViaFormParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createFileViaForm_",
		Method:             "POST",
		PathPattern:        "/{uri: .+}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateFileViaFormReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateFileViaFormOK), nil
}

/*
CreateNewTask create new task API
*/
func (a *Client) CreateNewTask(params *CreateNewTaskParams) (*CreateNewTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNewTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNewTask_",
		Method:             "POST",
		PathPattern:        "/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNewTaskReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateNewTaskOK), nil
}

/*
CreatePermission create permission API
*/
func (a *Client) CreatePermission(params *CreatePermissionParams) (*CreatePermissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePermissionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createPermission_",
		Method:             "POST",
		PathPattern:        "/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePermissionReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreatePermissionOK), nil
}

/*
DeleteAttribute delete attribute API
*/
func (a *Client) DeleteAttribute(params *DeleteAttributeParams) (*DeleteAttributeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAttributeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAttribute_",
		Method:             "DELETE",
		PathPattern:        "/{attrName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAttributeReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAttributeOK), nil
}

/*
DeleteAttributes delete attributes API
*/
func (a *Client) DeleteAttributes(params *DeleteAttributesParams) (*DeleteAttributesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAttributesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAttributes_",
		Method:             "DELETE",
		PathPattern:        "/attributes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAttributesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAttributesOK), nil
}

/*
DeleteCalendar delete calendar API
*/
func (a *Client) DeleteCalendar(params *DeleteCalendarParams) (*DeleteCalendarOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCalendarParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCalendar_",
		Method:             "DELETE",
		PathPattern:        "/calendars/{calendarName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCalendarReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCalendarOK), nil
}

/*
DeleteJob delete job API
*/
func (a *Client) DeleteJob(params *DeleteJobParams) (*DeleteJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteJob_",
		Method:             "DELETE",
		PathPattern:        "/{id: \\d+}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteJobReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteJobOK), nil
}

/*
DeleteJobs delete jobs API
*/
func (a *Client) DeleteJobs(params *DeleteJobsParams) (*DeleteJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteJobsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteJobs_",
		Method:             "DELETE",
		PathPattern:        "/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteJobsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteJobsOK), nil
}

/*
DeletePermissionsEntryPointRoot delete permissions entry point root API
*/
func (a *Client) DeletePermissionsEntryPointRoot(params *DeletePermissionsEntryPointRootParams) (*DeletePermissionsEntryPointRootOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePermissionsEntryPointRootParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePermissionsEntryPointRoot_",
		Method:             "DELETE",
		PathPattern:        "/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePermissionsEntryPointRootReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePermissionsEntryPointRootOK), nil
}

/*
DeletePermissionsEntryPoint delete permissions entry point API
*/
func (a *Client) DeletePermissionsEntryPoint(params *DeletePermissionsEntryPointParams) (*DeletePermissionsEntryPointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePermissionsEntryPointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePermissionsEntryPoint_",
		Method:             "DELETE",
		PathPattern:        "/{uri:.+}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePermissionsEntryPointReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePermissionsEntryPointOK), nil
}

/*
DeleteResource delete resource API
*/
func (a *Client) DeleteResource(params *DeleteResourceParams) (*DeleteResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteResource_",
		Method:             "DELETE",
		PathPattern:        "/{uri: .+}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteResourceReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteResourceOK), nil
}

/*
DeleteResources delete resources API
*/
func (a *Client) DeleteResources(params *DeleteResourcesParams) (*DeleteResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteResources_",
		Method:             "DELETE",
		PathPattern:        "/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteResourcesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteResourcesOK), nil
}

/*
DeleteRole delete role API
*/
func (a *Client) DeleteRole(params *DeleteRoleParams) (*DeleteRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRole_",
		Method:             "DELETE",
		PathPattern:        "/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRoleReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRoleOK), nil
}

/*
GetAttachment get attachment API
*/
func (a *Client) GetAttachment(params *GetAttachmentParams) (*GetAttachmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAttachmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAttachment_",
		Method:             "GET",
		PathPattern:        "/{executionId}/exports/{exportId}/attachments/{attachment}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAttachmentReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAttachmentOK), nil
}

/*
GetAttributesOfUser get attributes of user API
*/
func (a *Client) GetAttributesOfUser(params *GetAttributesOfUserParams) (*GetAttributesOfUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAttributesOfUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAttributesOfUser_",
		Method:             "GET",
		PathPattern:        "/{name}/attributes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAttributesOfUserReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAttributesOfUserOK), nil
}

/*
GetAttributes get attributes API
*/
func (a *Client) GetAttributes(params *GetAttributesParams) (*GetAttributesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAttributesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAttributes_",
		Method:             "GET",
		PathPattern:        "/attributes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAttributesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAttributesOK), nil
}

/*
GetBundles get bundles API
*/
func (a *Client) GetBundles(params *GetBundlesParams) (*GetBundlesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBundlesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBundles_",
		Method:             "GET",
		PathPattern:        "/bundles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBundlesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBundlesOK), nil
}

/*
GetCalendarByName get calendar by name API
*/
func (a *Client) GetCalendarByName(params *GetCalendarByNameParams) (*GetCalendarByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCalendarByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCalendarByName_",
		Method:             "GET",
		PathPattern:        "/calendars/{calendarName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCalendarByNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCalendarByNameOK), nil
}

/*
GetCalendarNames get calendar names API
*/
func (a *Client) GetCalendarNames(params *GetCalendarNamesParams) (*GetCalendarNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCalendarNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCalendarNames_",
		Method:             "GET",
		PathPattern:        "/calendars",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCalendarNamesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCalendarNamesOK), nil
}

/*
GetConnectionDetails get connection details API
*/
func (a *Client) GetConnectionDetails(params *GetConnectionDetailsParams) (*GetConnectionDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConnectionDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConnectionDetails_",
		Method:             "GET",
		PathPattern:        "/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConnectionDetailsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetConnectionDetailsOK), nil
}

/*
GetConnectionMetadata get connection metadata API
*/
func (a *Client) GetConnectionMetadata(params *GetConnectionMetadataParams) (*GetConnectionMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConnectionMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConnectionMetadata_",
		Method:             "GET",
		PathPattern:        "/{uuid}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConnectionMetadataReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetConnectionMetadataOK), nil
}

/*
GetCustomDataSourceDefinition get custom data source definition API
*/
func (a *Client) GetCustomDataSourceDefinition(params *GetCustomDataSourceDefinitionParams) (*GetCustomDataSourceDefinitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomDataSourceDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCustomDataSourceDefinition_",
		Method:             "GET",
		PathPattern:        "/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCustomDataSourceDefinitionReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCustomDataSourceDefinitionOK), nil
}

/*
GetCustomDataSources get custom data sources API
*/
func (a *Client) GetCustomDataSources(params *GetCustomDataSourcesParams) (*GetCustomDataSourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomDataSourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCustomDataSources_",
		Method:             "GET",
		PathPattern:        "/customDataSources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCustomDataSourcesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCustomDataSourcesOK), nil
}

/*
GetExportExecutionStatusObject get export execution status object API
*/
func (a *Client) GetExportExecutionStatusObject(params *GetExportExecutionStatusObjectParams) (*GetExportExecutionStatusObjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExportExecutionStatusObjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExportExecutionStatusObject_",
		Method:             "GET",
		PathPattern:        "/{executionId}/exports/{exportId}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetExportExecutionStatusObjectReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExportExecutionStatusObjectOK), nil
}

/*
GetFeatures get features API
*/
func (a *Client) GetFeatures(params *GetFeaturesParams) (*GetFeaturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeaturesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFeatures_",
		Method:             "GET",
		PathPattern:        "/features",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFeaturesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFeaturesOK), nil
}

/*
GetInputControlsInitialValues get input controls initial values API
*/
func (a *Client) GetInputControlsInitialValues(params *GetInputControlsInitialValuesParams) (*GetInputControlsInitialValuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInputControlsInitialValuesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInputControlsInitialValues_",
		Method:             "GET",
		PathPattern:        "/values",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInputControlsInitialValuesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInputControlsInitialValuesOK), nil
}

/*
GetJdbcDriversHipermediaRepresentation get jdbc drivers hipermedia representation API
*/
func (a *Client) GetJdbcDriversHipermediaRepresentation(params *GetJdbcDriversHipermediaRepresentationParams) (*GetJdbcDriversHipermediaRepresentationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJdbcDriversHipermediaRepresentationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getJdbcDriversHipermediaRepresentation_",
		Method:             "GET",
		PathPattern:        "/jdbcDrivers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetJdbcDriversHipermediaRepresentationReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetJdbcDriversHipermediaRepresentationOK), nil
}

/*
GetJobState get job state API
*/
func (a *Client) GetJobState(params *GetJobStateParams) (*GetJobStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getJobState_",
		Method:             "GET",
		PathPattern:        "/{id: \\d+}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetJobStateReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetJobStateOK), nil
}

/*
GetJobWithProcessedParameters get job with processed parameters API
*/
func (a *Client) GetJobWithProcessedParameters(params *GetJobWithProcessedParametersParams) (*GetJobWithProcessedParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobWithProcessedParametersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getJobWithProcessedParameters_",
		Method:             "GET",
		PathPattern:        "/{id: \\d+}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetJobWithProcessedParametersReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetJobWithProcessedParametersOK), nil
}

/*
GetOutputResource get output resource API
*/
func (a *Client) GetOutputResource(params *GetOutputResourceParams) (*GetOutputResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOutputResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOutputResource_",
		Method:             "GET",
		PathPattern:        "/{executionId}/exports/{exportId}/outputResource",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOutputResourceReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOutputResourceOK), nil
}

/*
GetPermissionsEntryPointRoot get permissions entry point root API
*/
func (a *Client) GetPermissionsEntryPointRoot(params *GetPermissionsEntryPointRootParams) (*GetPermissionsEntryPointRootOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPermissionsEntryPointRootParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPermissionsEntryPointRoot_",
		Method:             "GET",
		PathPattern:        "/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPermissionsEntryPointRootReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPermissionsEntryPointRootOK), nil
}

/*
GetPermissionsEntryPoint get permissions entry point API
*/
func (a *Client) GetPermissionsEntryPoint(params *GetPermissionsEntryPointParams) (*GetPermissionsEntryPointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPermissionsEntryPointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPermissionsEntryPoint_",
		Method:             "GET",
		PathPattern:        "/{uri:.+}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPermissionsEntryPointReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPermissionsEntryPointOK), nil
}

/*
GetReportExecutionStatusObject get report execution status object API
*/
func (a *Client) GetReportExecutionStatusObject(params *GetReportExecutionStatusObjectParams) (*GetReportExecutionStatusObjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportExecutionStatusObjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReportExecutionStatusObject_",
		Method:             "GET",
		PathPattern:        "/{executionId}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReportExecutionStatusObjectReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReportExecutionStatusObjectOK), nil
}

/*
GetReportExecution get report execution API
*/
func (a *Client) GetReportExecution(params *GetReportExecutionParams) (*GetReportExecutionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportExecutionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReportExecution_",
		Method:             "GET",
		PathPattern:        "/{executionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReportExecutionReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReportExecutionOK), nil
}

/*
GetReportInputControlValues get report input control values API
*/
func (a *Client) GetReportInputControlValues(params *GetReportInputControlValuesParams) (*GetReportInputControlValuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportInputControlValuesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReportInputControlValues_",
		Method:             "GET",
		PathPattern:        "/{inputControlIds: [^;/]+(;[^;/]+)*}/values",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReportInputControlValuesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReportInputControlValuesOK), nil
}

/*
GetReportInputParametersForSpecifiedInputControls get report input parameters for specified input controls API
*/
func (a *Client) GetReportInputParametersForSpecifiedInputControls(params *GetReportInputParametersForSpecifiedInputControlsParams) (*GetReportInputParametersForSpecifiedInputControlsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportInputParametersForSpecifiedInputControlsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReportInputParametersForSpecifiedInputControls_",
		Method:             "GET",
		PathPattern:        "/{inputControlIds: [^;/]+(;[^;/]+)*}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReportInputParametersForSpecifiedInputControlsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReportInputParametersForSpecifiedInputControlsOK), nil
}

/*
GetReportInputParameters get report input parameters API
*/
func (a *Client) GetReportInputParameters(params *GetReportInputParametersParams) (*GetReportInputParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportInputParametersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReportInputParameters_",
		Method:             "GET",
		PathPattern:        "/reports/{reportUnitURI: .+}/inputControls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReportInputParametersReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReportInputParametersOK), nil
}

/*
GetReportJobs get report jobs API
*/
func (a *Client) GetReportJobs(params *GetReportJobsParams) (*GetReportJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportJobsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReportJobs_",
		Method:             "GET",
		PathPattern:        "/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReportJobsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReportJobsOK), nil
}

/*
GetReportOutputResource get report output resource API
*/
func (a *Client) GetReportOutputResource(params *GetReportOutputResourceParams) (*GetReportOutputResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportOutputResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReportOutputResource_",
		Method:             "GET",
		PathPattern:        "/{reportUnitURI: .+}.{outputFormat}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReportOutputResourceReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReportOutputResourceOK), nil
}

/*
GetReportsRuntimeInformation get reports runtime information API
*/
func (a *Client) GetReportsRuntimeInformation(params *GetReportsRuntimeInformationParams) (*GetReportsRuntimeInformationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportsRuntimeInformationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReportsRuntimeInformation_",
		Method:             "GET",
		PathPattern:        "/reportExecutions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReportsRuntimeInformationReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReportsRuntimeInformationOK), nil
}

/*
GetResources get resources API
*/
func (a *Client) GetResources(params *GetResourcesParams) (*GetResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getResources_",
		Method:             "GET",
		PathPattern:        "/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResourcesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetResourcesOK), nil
}

/*
GetRoles get roles API
*/
func (a *Client) GetRoles(params *GetRolesParams) (*GetRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoles_",
		Method:             "GET",
		PathPattern:        "/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRolesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRolesOK), nil
}

/*
GetServerBuild get server build API
*/
func (a *Client) GetServerBuild(params *GetServerBuildParams) (*GetServerBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerBuildParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServerBuild_",
		Method:             "GET",
		PathPattern:        "/build",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServerBuildReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServerBuildOK), nil
}

/*
GetServerEditionName get server edition name API
*/
func (a *Client) GetServerEditionName(params *GetServerEditionNameParams) (*GetServerEditionNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerEditionNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServerEditionName_",
		Method:             "GET",
		PathPattern:        "/editionName",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServerEditionNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServerEditionNameOK), nil
}

/*
GetServerEdition get server edition API
*/
func (a *Client) GetServerEdition(params *GetServerEditionParams) (*GetServerEditionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerEditionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServerEdition_",
		Method:             "GET",
		PathPattern:        "/edition",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServerEditionReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServerEditionOK), nil
}

/*
GetServerExpiration get server expiration API
*/
func (a *Client) GetServerExpiration(params *GetServerExpirationParams) (*GetServerExpirationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerExpirationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServerExpiration_",
		Method:             "GET",
		PathPattern:        "/expiration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServerExpirationReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServerExpirationOK), nil
}

/*
GetServerInfo get server info API
*/
func (a *Client) GetServerInfo(params *GetServerInfoParams) (*GetServerInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServerInfo_",
		Method:             "GET",
		PathPattern:        "/serverInfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServerInfoReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServerInfoOK), nil
}

/*
GetServerLicenseType get server license type API
*/
func (a *Client) GetServerLicenseType(params *GetServerLicenseTypeParams) (*GetServerLicenseTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerLicenseTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServerLicenseType_",
		Method:             "GET",
		PathPattern:        "/licenseType",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServerLicenseTypeReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServerLicenseTypeOK), nil
}

/*
GetServerVersion get server version API
*/
func (a *Client) GetServerVersion(params *GetServerVersionParams) (*GetServerVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServerVersion_",
		Method:             "GET",
		PathPattern:        "/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServerVersionReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServerVersionOK), nil
}

/*
GetSettingsGroup get settings group API
*/
func (a *Client) GetSettingsGroup(params *GetSettingsGroupParams) (*GetSettingsGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSettingsGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSettingsGroup_",
		Method:             "GET",
		PathPattern:        "/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSettingsGroupReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSettingsGroupOK), nil
}

/*
GetSpecificAttributeOfUser get specific attribute of user API
*/
func (a *Client) GetSpecificAttributeOfUser(params *GetSpecificAttributeOfUserParams) (*GetSpecificAttributeOfUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSpecificAttributeOfUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSpecificAttributeOfUser_",
		Method:             "GET",
		PathPattern:        "/{name}/attributes/{attrName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSpecificAttributeOfUserReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSpecificAttributeOfUserOK), nil
}

/*
GetSpecificAttribute get specific attribute API
*/
func (a *Client) GetSpecificAttribute(params *GetSpecificAttributeParams) (*GetSpecificAttributeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSpecificAttributeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSpecificAttribute_",
		Method:             "GET",
		PathPattern:        "/{attrName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSpecificAttributeReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSpecificAttributeOK), nil
}

/*
GetStateOfTheTask get state of the task API
*/
func (a *Client) GetStateOfTheTask(params *GetStateOfTheTaskParams) (*GetStateOfTheTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStateOfTheTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStateOfTheTask_",
		Method:             "GET",
		PathPattern:        "/{id}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStateOfTheTaskReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStateOfTheTaskOK), nil
}

/*
GetTasksIds get tasks ids API
*/
func (a *Client) GetTasksIds(params *GetTasksIdsParams) (*GetTasksIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTasksIdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTasksIds_",
		Method:             "GET",
		PathPattern:        "/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTasksIdsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTasksIdsOK), nil
}

/*
GetThumbnails get thumbnails API
*/
func (a *Client) GetThumbnails(params *GetThumbnailsParams) (*GetThumbnailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetThumbnailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getThumbnails_",
		Method:             "GET",
		PathPattern:        "/thumbnails",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetThumbnailsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetThumbnailsOK), nil
}

/*
GetUsers get users API
*/
func (a *Client) GetUsers(params *GetUsersParams) (*GetUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsers_",
		Method:             "GET",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUsersReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersOK), nil
}

/*
ModifyConnection modify connection API
*/
func (a *Client) ModifyConnection(params *ModifyConnectionParams) (*ModifyConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyConnectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "modifyConnection_",
		Method:             "PUT",
		PathPattern:        "/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyConnectionReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyConnectionOK), nil
}

/*
PatchResource patch resource API
*/
func (a *Client) PatchResource(params *PatchResourceParams) (*PatchResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchResource_",
		Method:             "PATCH",
		PathPattern:        "/{uri: .+}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchResourceReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchResourceOK), nil
}

/*
PutAttribute put attribute API
*/
func (a *Client) PutAttribute(params *PutAttributeParams) (*PutAttributeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAttributeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putAttribute_",
		Method:             "PUT",
		PathPattern:        "/{attrName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAttributeReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAttributeOK), nil
}

/*
PutAttributes put attributes API
*/
func (a *Client) PutAttributes(params *PutAttributesParams) (*PutAttributesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAttributesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putAttributes_",
		Method:             "PUT",
		PathPattern:        "/attributes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAttributesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAttributesOK), nil
}

/*
PutCalendar put calendar API
*/
func (a *Client) PutCalendar(params *PutCalendarParams) (*PutCalendarOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCalendarParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putCalendar_",
		Method:             "PUT",
		PathPattern:        "/calendars/{calendarName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutCalendarReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCalendarOK), nil
}

/*
RemoveConnectionDetails remove connection details API
*/
func (a *Client) RemoveConnectionDetails(params *RemoveConnectionDetailsParams) (*RemoveConnectionDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveConnectionDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeConnectionDetails_",
		Method:             "DELETE",
		PathPattern:        "/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveConnectionDetailsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveConnectionDetailsOK), nil
}

/*
UpdateFileViaForm update file via form API
*/
func (a *Client) UpdateFileViaForm(params *UpdateFileViaFormParams) (*UpdateFileViaFormOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFileViaFormParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateFileViaForm_",
		Method:             "PUT",
		PathPattern:        "/{uri: .+}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateFileViaFormReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateFileViaFormOK), nil
}

/*
UpdateJob update job API
*/
func (a *Client) UpdateJob(params *UpdateJobParams) (*UpdateJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateJob_",
		Method:             "POST",
		PathPattern:        "/{id: \\d+}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateJobReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateJobOK), nil
}

/*
UpdateJobs update jobs API
*/
func (a *Client) UpdateJobs(params *UpdateJobsParams) (*UpdateJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateJobsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateJobs_",
		Method:             "POST",
		PathPattern:        "/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateJobsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateJobsOK), nil
}

/*
UpdatePermissionRoot update permission root API
*/
func (a *Client) UpdatePermissionRoot(params *UpdatePermissionRootParams) (*UpdatePermissionRootOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePermissionRootParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updatePermissionRoot_",
		Method:             "PUT",
		PathPattern:        "/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePermissionRootReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdatePermissionRootOK), nil
}

/*
UpdatePermission update permission API
*/
func (a *Client) UpdatePermission(params *UpdatePermissionParams) (*UpdatePermissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePermissionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updatePermission_",
		Method:             "PUT",
		PathPattern:        "/{uri:.+}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePermissionReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdatePermissionOK), nil
}

/*
UpdateRole update role API
*/
func (a *Client) UpdateRole(params *UpdateRoleParams) (*UpdateRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRole_",
		Method:             "PUT",
		PathPattern:        "/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRoleReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateRoleOK), nil
}

/*
UploadDriver upload driver API
*/
func (a *Client) UploadDriver(params *UploadDriverParams) (*UploadDriverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadDriverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uploadDriver_",
		Method:             "POST",
		PathPattern:        "/jdbcDrivers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UploadDriverReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UploadDriverOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
