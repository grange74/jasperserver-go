package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/swag"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// NewGetReportInputControlValuesParams creates a new GetReportInputControlValuesParams object
// with the default values initialized.
func NewGetReportInputControlValuesParams() *GetReportInputControlValuesParams {
	var (
		freshDataDefault bool = bool(false)
	)
	return &GetReportInputControlValuesParams{
		FreshData: &freshDataDefault,
	}
}

/*GetReportInputControlValuesParams contains all the parameters to send to the API endpoint
for the get report input control values operation typically these are written to a http.Request
*/
type GetReportInputControlValuesParams struct {

	/*FreshData*/
	FreshData *bool
	/*InputControlIds*/
	InputControlIds *string
	/*ReportUnitURI*/
	ReportUnitURI *string
}

// WithFreshData adds the freshData to the get report input control values params
func (o *GetReportInputControlValuesParams) WithFreshData(freshData *bool) *GetReportInputControlValuesParams {
	o.FreshData = freshData
	return o
}

// WithInputControlIds adds the inputControlIds to the get report input control values params
func (o *GetReportInputControlValuesParams) WithInputControlIds(inputControlIds *string) *GetReportInputControlValuesParams {
	o.InputControlIds = inputControlIds
	return o
}

// WithReportUnitURI adds the reportUnitUri to the get report input control values params
func (o *GetReportInputControlValuesParams) WithReportUnitURI(reportUnitUri *string) *GetReportInputControlValuesParams {
	o.ReportUnitURI = reportUnitUri
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetReportInputControlValuesParams) WriteToRequest(r client.Request, reg strfmt.Registry) error {

	var res []error

	if o.FreshData != nil {

		// query param freshData
		var qrFreshData bool
		if o.FreshData != nil {
			qrFreshData = *o.FreshData
		}
		qFreshData := swag.FormatBool(qrFreshData)
		if qFreshData != "" {
			if err := r.SetQueryParam("freshData", qFreshData); err != nil {
				return err
			}
		}

	}

	if o.InputControlIds != nil {

		// query param inputControlIds
		var qrInputControlIds string
		if o.InputControlIds != nil {
			qrInputControlIds = *o.InputControlIds
		}
		qInputControlIds := qrInputControlIds
		if qInputControlIds != "" {
			if err := r.SetQueryParam("inputControlIds", qInputControlIds); err != nil {
				return err
			}
		}

	}

	if o.ReportUnitURI != nil {

		// query param reportUnitURI
		var qrReportUnitURI string
		if o.ReportUnitURI != nil {
			qrReportUnitURI = *o.ReportUnitURI
		}
		qReportUnitURI := qrReportUnitURI
		if qReportUnitURI != "" {
			if err := r.SetQueryParam("reportUnitURI", qReportUnitURI); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
