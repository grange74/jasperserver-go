package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/swag"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// NewCreateGetThumbnailsFormEncodedParams creates a new CreateGetThumbnailsFormEncodedParams object
// with the default values initialized.
func NewCreateGetThumbnailsFormEncodedParams() *CreateGetThumbnailsFormEncodedParams {
	var ()
	return &CreateGetThumbnailsFormEncodedParams{}
}

/*CreateGetThumbnailsFormEncodedParams contains all the parameters to send to the API endpoint
for the create get thumbnails form encoded operation typically these are written to a http.Request
*/
type CreateGetThumbnailsFormEncodedParams struct {

	/*Accept*/
	Accept *string
	/*DefaultAllowed*/
	DefaultAllowed *bool
}

// WithAccept adds the accept to the create get thumbnails form encoded params
func (o *CreateGetThumbnailsFormEncodedParams) WithAccept(accept *string) *CreateGetThumbnailsFormEncodedParams {
	o.Accept = accept
	return o
}

// WithDefaultAllowed adds the defaultAllowed to the create get thumbnails form encoded params
func (o *CreateGetThumbnailsFormEncodedParams) WithDefaultAllowed(defaultAllowed *bool) *CreateGetThumbnailsFormEncodedParams {
	o.DefaultAllowed = defaultAllowed
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *CreateGetThumbnailsFormEncodedParams) WriteToRequest(r client.Request, reg strfmt.Registry) error {

	var res []error

	if o.Accept != nil {

		// query param Accept
		var qrAccept string
		if o.Accept != nil {
			qrAccept = *o.Accept
		}
		qAccept := qrAccept
		if qAccept != "" {
			if err := r.SetQueryParam("Accept", qAccept); err != nil {
				return err
			}
		}

	}

	if o.DefaultAllowed != nil {

		// query param defaultAllowed
		var qrDefaultAllowed bool
		if o.DefaultAllowed != nil {
			qrDefaultAllowed = *o.DefaultAllowed
		}
		qDefaultAllowed := swag.FormatBool(qrDefaultAllowed)
		if qDefaultAllowed != "" {
			if err := r.SetQueryParam("defaultAllowed", qDefaultAllowed); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
