package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/errors"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// NewPostReportsReportUnitURIInputControlsParams creates a new PostReportsReportUnitURIInputControlsParams object
// with the default values initialized.
func NewPostReportsReportUnitURIInputControlsParams() *PostReportsReportUnitURIInputControlsParams {
	var ()
	return &PostReportsReportUnitURIInputControlsParams{}
}

/*PostReportsReportUnitURIInputControlsParams contains all the parameters to send to the API endpoint
for the post reports report unit URI input controls operation typically these are written to a http.Request
*/
type PostReportsReportUnitURIInputControlsParams struct {

	/*ReportUnitURI*/
	ReportUnitURI *string
}

// WithReportUnitURI adds the reportUnitUri to the post reports report unit URI input controls params
func (o *PostReportsReportUnitURIInputControlsParams) WithReportUnitURI(reportUnitUri *string) *PostReportsReportUnitURIInputControlsParams {
	o.ReportUnitURI = reportUnitUri
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *PostReportsReportUnitURIInputControlsParams) WriteToRequest(r client.Request, reg strfmt.Registry) error {

	var res []error

	if o.ReportUnitURI != nil {

		// query param reportUnitURI
		var qrReportUnitURI string
		if o.ReportUnitURI != nil {
			qrReportUnitURI = *o.ReportUnitURI
		}
		qReportUnitURI := qrReportUnitURI
		if qReportUnitURI != "" {
			if err := r.SetQueryParam("reportUnitURI", qReportUnitURI); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
