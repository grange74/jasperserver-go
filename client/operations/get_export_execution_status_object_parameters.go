package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetExportExecutionStatusObjectParams creates a new GetExportExecutionStatusObjectParams object
// with the default values initialized.
func NewGetExportExecutionStatusObjectParams() *GetExportExecutionStatusObjectParams {
	var ()
	return &GetExportExecutionStatusObjectParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetExportExecutionStatusObjectParamsWithTimeout creates a new GetExportExecutionStatusObjectParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetExportExecutionStatusObjectParamsWithTimeout(timeout time.Duration) *GetExportExecutionStatusObjectParams {
	var ()
	return &GetExportExecutionStatusObjectParams{

		timeout: timeout,
	}
}

/*GetExportExecutionStatusObjectParams contains all the parameters to send to the API endpoint
for the get export execution status object operation typically these are written to a http.Request
*/
type GetExportExecutionStatusObjectParams struct {

	/*ExecutionID*/
	ExecutionID *string
	/*ExportID*/
	ExportID *string

	timeout time.Duration
}

// WithExecutionID adds the executionId to the get export execution status object params
func (o *GetExportExecutionStatusObjectParams) WithExecutionID(ExecutionID *string) *GetExportExecutionStatusObjectParams {
	o.ExecutionID = ExecutionID
	return o
}

// WithExportID adds the exportId to the get export execution status object params
func (o *GetExportExecutionStatusObjectParams) WithExportID(ExportID *string) *GetExportExecutionStatusObjectParams {
	o.ExportID = ExportID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetExportExecutionStatusObjectParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.ExecutionID != nil {

		// path param executionId
		if err := r.SetPathParam("executionId", *o.ExecutionID); err != nil {
			return err
		}

	}

	if o.ExportID != nil {

		// path param exportId
		if err := r.SetPathParam("exportId", *o.ExportID); err != nil {
			return err
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
