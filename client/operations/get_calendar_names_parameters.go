package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCalendarNamesParams creates a new GetCalendarNamesParams object
// with the default values initialized.
func NewGetCalendarNamesParams() *GetCalendarNamesParams {
	var ()
	return &GetCalendarNamesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCalendarNamesParamsWithTimeout creates a new GetCalendarNamesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCalendarNamesParamsWithTimeout(timeout time.Duration) *GetCalendarNamesParams {
	var ()
	return &GetCalendarNamesParams{

		timeout: timeout,
	}
}

/*GetCalendarNamesParams contains all the parameters to send to the API endpoint
for the get calendar names operation typically these are written to a http.Request
*/
type GetCalendarNamesParams struct {

	/*CalendarType*/
	CalendarType *string

	timeout time.Duration
}

// WithCalendarType adds the calendarType to the get calendar names params
func (o *GetCalendarNamesParams) WithCalendarType(CalendarType *string) *GetCalendarNamesParams {
	o.CalendarType = CalendarType
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetCalendarNamesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.CalendarType != nil {

		// query param calendarType
		var qrCalendarType string
		if o.CalendarType != nil {
			qrCalendarType = *o.CalendarType
		}
		qCalendarType := qrCalendarType
		if qCalendarType != "" {
			if err := r.SetQueryParam("calendarType", qCalendarType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
