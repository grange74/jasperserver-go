package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPutAttributesParams creates a new PutAttributesParams object
// with the default values initialized.
func NewPutAttributesParams() *PutAttributesParams {
	var ()
	return &PutAttributesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutAttributesParamsWithTimeout creates a new PutAttributesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutAttributesParamsWithTimeout(timeout time.Duration) *PutAttributesParams {
	var ()
	return &PutAttributesParams{

		timeout: timeout,
	}
}

/*PutAttributesParams contains all the parameters to send to the API endpoint
for the put attributes operation typically these are written to a http.Request
*/
type PutAttributesParams struct {

	/*Accept*/
	Accept *string
	/*ContentType*/
	ContentType *string
	/*Embedded*/
	Embedded *string
	/*Name*/
	Name *string

	timeout time.Duration
}

// WithAccept adds the accept to the put attributes params
func (o *PutAttributesParams) WithAccept(Accept *string) *PutAttributesParams {
	o.Accept = Accept
	return o
}

// WithContentType adds the contentType to the put attributes params
func (o *PutAttributesParams) WithContentType(ContentType *string) *PutAttributesParams {
	o.ContentType = ContentType
	return o
}

// WithEmbedded adds the embedded to the put attributes params
func (o *PutAttributesParams) WithEmbedded(Embedded *string) *PutAttributesParams {
	o.Embedded = Embedded
	return o
}

// WithName adds the name to the put attributes params
func (o *PutAttributesParams) WithName(Name *string) *PutAttributesParams {
	o.Name = Name
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *PutAttributesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Accept != nil {

		// query param Accept
		var qrAccept string
		if o.Accept != nil {
			qrAccept = *o.Accept
		}
		qAccept := qrAccept
		if qAccept != "" {
			if err := r.SetQueryParam("Accept", qAccept); err != nil {
				return err
			}
		}

	}

	if o.ContentType != nil {

		// query param Content-Type
		var qrContentType string
		if o.ContentType != nil {
			qrContentType = *o.ContentType
		}
		qContentType := qrContentType
		if qContentType != "" {
			if err := r.SetQueryParam("Content-Type", qContentType); err != nil {
				return err
			}
		}

	}

	if o.Embedded != nil {

		// query param _embedded
		var qrEmbedded string
		if o.Embedded != nil {
			qrEmbedded = *o.Embedded
		}
		qEmbedded := qrEmbedded
		if qEmbedded != "" {
			if err := r.SetQueryParam("_embedded", qEmbedded); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
